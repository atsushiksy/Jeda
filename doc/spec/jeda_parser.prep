/****************************************************************************
      Jeda Programming Language Syntax Specification

   Copyright (C) 1999, 2000, 2001 Juniper Networks Inc.

   This program is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the
   Free Software Foundation; either version 2, or (at your option) any
   later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
   USA.  
   
*****************************************************************************/


1. Lexical Elements
  
  1.1 white space
    White spece does no meaning and acts as separator.
  
  1.2 comments
    Two types of comment are supported.
    
    /* text */   : A traditional C style comment
    //           : A single line comment
    
  1.3 Identifiers
    
    [a-zA-Z_][a-zA-Z_0-9]*
    
  1.4 Keywords
    
#KEYWORD jeda_keyword.data

    ** 'long' is a keyword, but not used now.

  1.5 Separators and Operators
  
#KEYWORD jeda_operators.data
  
  1.6 Constant
  
    1.6.1 Integer Constant
      Integer Constant start with non-zero digit followed by any digit.
      
        0
        [1-9][0-9]*
      
    1.6.2 C style numerical Constant
      C style numerical number constant starts with 0 and a formant character
      followed by digit characters. 0hff or 0Hff style can be used for hex.
      0xb0100 style can be used for binary.
      
       0[dDoOxXhHbB][0-9a-fA-FzZxX]+
      
    1.6.3 Verilog style numerical Literal
      Verilog style numerical numbers are also supported. 
      
        [0-9]*'[dDoOxXhHbB][0-9a-fA-FzZxX]+
      

    1.6.4 String Constant
      String constant is a sequence of caractors within " (double quote). 
      More than one line of string can be specified with \ (backslash) 
      followed by \n (new line).
      
    1.6.5 null Literal
      null represents empty status of a Jeda object.
      
       null
       
2. Program structure
        
#BEGIN  translation_unit

3. Port and port_set

#BEGIN port

  3.1 port attribute

#BEGIN port_attrib
    
       
4. port_set
        
#BEGIN port_set

5. Connection Set

#BEGIN connection_set

6. Variables and enum type declarations
  
#BEGIN var_enum_definition

7. Variable Declaration
        
#BEGIN variable_definition
       
8. Basic Data Types
         
#BEGIN data_type

9. Type Definition
  
#BEGIN type_definition

10. Initial statement.  
 
#BEGIN initial_statement
 
11. Function Declaration
  
#BEGIN function_definition

11.1 Attributes for variable, function and class
   
#BEGIN var_func_class_attrib

12. Class Declaration
    
#BEGIN class_definition

13. Statement
  
#BEGIN statement

  13.1 Block
  
#BEGIN block

  13.2 Statement Prefix
  
#BEGIN statement_prefix
  
  13.3. Null statement

#BEGIN null_statement

  13.4 If else statement

#BEGIN if_statement  


  13.5 While statement

#BEGIN while_statement   

  13.6 for statement

#BEGIN for_statement

  13.7 repeat statement

#BEGIN repeat_statement

  13.8 Do while statement

#BEGIN do_while_statement

  13.9 Forever statement
    
#BEGIN forever_statement

  13.10 Case statement

#BEGIN case_statement

  13.11 Casex statement

#BEGIN casex_statement

  13.12 Casez statement

#BEGIN casez_statement

  13.13 Break statement

#BEGIN break_statement

  13.14 Continue statement

#BEGIN continue_statement

  13.15 Fork join statement

#BEGIN fork_join_statement

  13.16 Terminate statement

#BEGIN terminate_statement

  13.17 Breakpoint statement

#BEGIN breakpoint_statement

  13.18 increment and decrement statement

#BEGIN expression_statement

  13.19 Assign statement

#BEGIN assign_statement
  
  13.20 Function call statement

#BEGIN function_call_statement

14. Operators and precedence rule

#BEGIN precedence_table

15. Constant and expression
  15.1 Constant

#BEGIN constant

  15.2 Number representation

#BEGIN number_representation
   
  15.3 Expression

#BEGIN expression
  
  15.4 Timed expression
  
#BEGIN timed_expression
        
  15.5 null expression

#BEGIN bool_null_expression

  15.6 increment and decrement expression

#BEGIN state_expression

  15.7 concatenation expression

#BEGIN concatenation_expression

  15.8 list expression

#BEGIN list_expression

  15.9 Variable and port expression

#BEGIN varport_expression

  15.10 Function call

#BEGIN function_call

  
16. Assign 
  
#BEGIN assign_expression

