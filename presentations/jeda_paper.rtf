{\rtf1\ansi\deff1\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman{\*\falt Thorndale};}{\f1\froman\fprq2\fcharset0 Times New Roman{\*\falt Thorndale};}{\f2\fmodern\fprq1\fcharset0 Courier;}{\f3\froman\fprq2\fcharset0 Times New Roman{\*\falt Thorndale};}{\f4\froman\fprq1\fcharset0 Courier New;}{\f5\fnil\fprq2\fcharset2 StarSymbol;}{\f6\fmodern\fprq1\fcharset0 Courier;}{\f7\fnil\fprq2\fcharset0 MS Mincho{\*\falt HG Mincho Light J};}{\f8\fnil\fprq2\fcharset0 Times New Roman{\*\falt Thorndale};}{\f9\fnil\fprq2\fcharset0 Arial Unicode MS;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red128\green0\blue0;\red0\green128\blue128;\red128\green128\blue128;}
{\stylesheet{\s1\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\snext1 Default;}
{\s2\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext3 Text body;}
{\s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext3 First line indent;}
{\s4\li567\ri0\fi-283\sa119\cf1\sl288\slmult1\qj{\*\tlswg8236}\tx567{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext4 Hanging indent;}
{\s5\li283\ri0\fi0\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext5 Text body indent;}
{\s6\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext6 Complimentary close;}
{\s7\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext7 Signature;}
{\s8\li2835\ri0\fi-2551\sa119\cf1\sl288\slmult1\qj{\*\tlswg8236}\tx2835{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext8 List Indent;}
{\s9\li2268\ri0\fi0\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext9 Marginalia;}
{\s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\sbasedon1\snext2 Heading;}
{\s11\sb476\sa357\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\sbasedon10\snext2{\*\soutlvl0} Heading 1;}
{\s12\sb720\sa357\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs24\b\sbasedon11\snext2 Heading 2;}
{\s13\sb476\sa238\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\b\sbasedon12\snext2 Heading 3;}
{\s14\sb238\sa119\keepn\scaps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon13\snext2 Heading 4;}
{\s15\sb238\sa119\keepn\caps0\scaps0\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon14\snext2 Heading 5;}
{\s16\sb238\sa119\keepn\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon15\snext2 Heading 6;}
{\s17\sb238\sa119\keepn\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon16\snext2 Heading 7;}
{\s18\sb238\sa119\keepn\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon17\snext2 Heading 8;}
{\s19\sb238\sa119\keepn\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon18\snext2 Heading 9;}
{\s20\sb238\sa119\keepn\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon19\snext2 Heading 10;}
{\s21\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext21 List;}
{\s22\li283\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext22 Numbering 1 Start;}
{\s23\li283\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext23 Numbering 1;}
{\s24\li283\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext24 Numbering 1 End;}
{\s25\li283\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext25 Numbering 1 Cont.;}
{\s26\li566\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext26 Numbering 2 Start;}
{\s27\li566\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext27 Numbering 2;}
{\s28\li566\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext28 Numbering 2 End;}
{\s29\li566\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext29 Numbering 2 Cont.;}
{\s30\li849\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext30 Numbering 3 Start;}
{\s31\li849\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext31 Numbering 3;}
{\s32\li849\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext32 Numbering 3 End;}
{\s33\li849\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext33 Numbering 3 Cont.;}
{\s34\li1132\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext34 Numbering 4 Start;}
{\s35\li1132\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext35 Numbering 4;}
{\s36\li1132\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext36 Numbering 4 End;}
{\s37\li1132\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext37 Numbering 4 Cont.;}
{\s38\li1415\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext38 Numbering 5 Start;}
{\s39\li1415\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext39 Numbering 5;}
{\s40\li1415\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext40 Numbering 5 End;}
{\s41\li1415\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext41 Numbering 5 Cont.;}
{\s42\li283\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext42 List 1 Start;}
{\s43\li283\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext43 List 1;}
{\s44\li283\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext44 List 1 End;}
{\s45\li283\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext45 List 1 Cont.;}
{\s46\li566\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext46 List 2 Start;}
{\s47\li566\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext47 List 2;}
{\s48\li566\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext48 List 2 End;}
{\s49\li566\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext49 List 2 Cont.;}
{\s50\li849\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext50 List 3 Start;}
{\s51\li849\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext51 List 3;}
{\s52\li849\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext52 List 3 End;}
{\s53\li849\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext53 List 3 Cont.;}
{\s54\li1132\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext54 List 4 Start;}
{\s55\li1132\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext55 List 4;}
{\s56\li1132\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext56 List 4 End;}
{\s57\li1132\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext57 List 4 Cont.;}
{\s58\li1415\ri0\fi-283\sb240\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext58 List 5 Start;}
{\s59\li1415\ri0\fi-283\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext59 List 5;}
{\s60\li1415\ri0\fi-283\sa240\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext60 List 5 End;}
{\s61\li1415\ri0\fi0\sa120\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon21\snext61 List 5 Cont.;}
{\s62\sa62\brdrt\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\sbasedon11\snext62 Header;}
{\s63\brdrb\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\caps\cf1\sl300\slmult1\qc{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen3\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon1\snext63 Header left;}
{\s64\cf1\sl300\slmult1{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext64 Header right;}
{\s65\brdrt\brdrs\brdrw1\brdrcf1\brsp28\brdrb\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1\sl300\slmult1{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon1\snext65 Footer;}
{\s66\cf1\sl300\slmult1{\*\tlswg8236}\tqc\tx3827{\*\tlswg8236}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext66 Footer left;}
{\s67\cf1\sl300\slmult1{\*\tlswg8236}\tqc\tx3827{\*\tlswg8236}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext67 Footer right;}
{\s68\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext68 Table Contents;}
{\s69\sa119\cf1\sl288\slmult1\qc{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\i\b\sbasedon68\snext69 Table Heading;}
{\s70\sb120\sa120\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\i\sbasedon1\snext70 Caption;}
{\s71\sb120\sa120\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\i\sbasedon70\snext71 Illustration;}
{\s72\sb120\sa120\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\i\sbasedon70\snext72 Table;}
{\s73\sb120\sa120\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\i\sbasedon70\snext73 Text;}
{\s74\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon2\snext74 Frame contents;}
{\s75\li283\ri0\fi-283\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\sbasedon1\snext75 Footnote;}
{\s76\sa60\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext76 Addressee;}
{\s77\sa62\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\sbasedon11\snext77 Sender;}
{\s78\li283\ri0\fi-283\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\sbasedon1\snext78 Endnote;}
{\s79\sb120\sa120\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\i\sbasedon70\snext79 Drawing;}
{\s80\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext80 Index;}
{\s81\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs32\b\sbasedon10\snext81 Index Heading;}
{\s82\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext82 Index 1;}
{\s83\li283\ri0\fi0\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext83 Index 2;}
{\s84\li566\ri0\fi0\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext84 Index 3;}
{\s85\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext85 Index Separator;}
{\s86\sb476\sa357\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\sbasedon11\snext86 Contents Heading;}
{\s87\sb476\caps\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\b\sbasedon80\snext87 Contents 1;}
{\s88\sb181\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx9638{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\b\sbasedon80\snext88 Contents 2;}
{\s89\sb119\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx9638{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext89 Contents 3;}
{\s90\sb62\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx9638{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs20\sbasedon80\snext90 Contents 4;}
{\s91\li0\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx9638{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon80\snext91 Contents 5;}
{\s92\sb476\sa357\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\sbasedon11\snext92 User Index Heading;}
{\s93\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext93 User Index 1;}
{\s94\li283\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext94 User Index 2;}
{\s95\li566\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext95 User Index 3;}
{\s96\li849\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext96 User Index 4;}
{\s97\li1132\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext97 User Index 5;}
{\s98\li0\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx9638{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon91\snext98 Contents 6;}
{\s99\li0\ri0\fi0\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon98\snext99 Contents 7;}
{\s100\li0\ri0\fi0\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon99\snext100 Contents 8;}
{\s101\li0\ri0\fi0\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon100\snext101 Contents 9;}
{\s102\li0\ri0\fi0\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18\sbasedon101\snext102 Contents 10;}
{\s103\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs32\b\sbasedon10\snext103 Illustration Index Heading;}
{\s104\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext104 Illustration Index 1;}
{\s105\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs32\b\sbasedon10\snext105 Object index heading;}
{\s106\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext106 Object index 1;}
{\s107\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs32\b\sbasedon10\snext107 Table index heading;}
{\s108\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext108 Table index 1;}
{\s109\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs32\b\sbasedon10\snext109 Bibliography Heading;}
{\s110\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext110 Bibliography 1;}
{\s111\li1415\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext111 User Index 6;}
{\s112\li1698\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext112 User Index 7;}
{\s113\li1981\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext113 User Index 8;}
{\s114\li2264\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext114 User Index 9;}
{\s115\li2547\ri0\fi0\cf1\sl300\slmult1\keep\tldot{\*\tlswg11820}\tqr\tx7654{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon80\snext115 User Index 10;}
{\s116\sb1797\sa119\brdrb\brdrs\brdrw1\brdrcf1\brsp476{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp476\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs64\sbasedon10\snext117 Title;}
{\s117\li567\ri567\fi0\sb476\sa119\keepn\scaps\cf1\sl300\slmult1\qc\keep{\*\hyphen3\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs32\sbasedon10\snext117 Subtitle;}
{\s118\li567\ri567\fi0\sa283\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext118 Quotations;}
{\s119\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs20\sbasedon1\snext119 Preformatted Text;}
{\s120\sa283\brdrb\brdrdb\brdrw15\brdrcf5\brsp0{\*\brdrb\brdlncol5\brdlnin1\brdlnout1\brdlndist20}\brsp0\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs12\sbasedon1\snext2 Horizontal Line;}
{\s121\li567\ri0\fi0\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext121 List Contents;}
{\s122\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\sbasedon1\snext121 List Heading;}
{\s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18\sbasedon82\snext123 code;}
{\*\cs125\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Footnote Characters;}
{\*\cs126\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Page Number;}
{\*\cs127\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Caption Characters;}
{\*\cs128\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Drop Caps;}
{\*\cs129\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Numbering Symbols;}
{\*\cs130\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f5\fs18\lang1033 Bullet Symbols;}
{\*\cs131\cf2\ul\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Internet Link;}
{\*\cs132\cf3\ul\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Visited Internet Link;}
{\*\cs133\scaps\cf4\uld\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Placeholder;}
{\*\cs134\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Index Link;}
{\*\cs135\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Endnote Characters;}
{\*\cs136\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Line numbering;}
{\*\cs137\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033\b Main index entry;}
{\*\cs138\cf1{\*\updnprop5801}\up10\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Footnote anchor;}
{\*\cs139\cf1{\*\updnprop5801}\up10\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Endnote anchor;}
{\*\cs140\cf1\rtlch\af9\afs12\lang255\ltrch\dbch\af7\afs12\langfe255\loch\f1\fs12\lang1033 Rubies;}
{\*\cs141\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033\i Emphasis;}
{\*\cs142\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033\i Quotation;}
{\*\cs143\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033\b Strong Emphasis;}
{\*\cs144\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs24\lang1033 Source Text;}
{\*\cs145\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs24\lang1033 Example;}
{\*\cs146\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs24\lang1033 User Entry;}
{\*\cs147\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033\i Variable;}
{\*\cs148\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f1\fs24\lang1033 Definition;}
{\*\cs149\cf1\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f4\fs24\lang1033 Teletype;}
}
{\info{\author Atsushi Kasuya}{\creatim\yr2002\mo11\dy1\hr23\min31}{\operator Atsushi Kasuya}{\revtim\yr2002\mo11\dy14\hr9\min37}{\printim\yr2002\mo11\dy14\hr0\min46}{\comment StarWriter}{\vern6410}}\deftab283
{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn585\margrsxn585\margtsxn850\margbsxn1134\footery0{\*\footeryt1417\footerxl0\footerxr0\footeryh1700}{\footer \pard\plain \s65\brdrt\brdrs\brdrw1\brdrcf1\brsp28\brdrb\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1\sl300\slmult1{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18 Atsushi{\ltrch\loch\f0  Kasuya\tab  - Page {\field{\*\fldinst \\page}{\fldrslt VII}}}
\par }
\cols2\colsx278\pgdscnxt0 Default;}
{\pgdsc1\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn584\margrsxn584\margtsxn595\margbsxn1134\headery0{\*\headeryb283\headerxl0\headerxr0\headeryh2607}{\header \pard\plain \s62\margtsxn0\margbsxn62\brdrt\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\brdrt\brdrs\brdrw1\brdrcf1\brsp85\brdrb\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\caps0\scaps0\ltrch\loch\fs40 {\ltrch\loch\f0 Jeda, A New Functional Verification Language}
\par \pard\plain \s62\margtsxn0\margbsxn62\brdrt\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\caps0\scaps0\ltrch\loch\fs28 {\ltrch\loch\f0 Atsushi Kasuya, Jeda Research, Inc.}
\par \pard\plain \s62\margtsxn0\margbsxn62\brdrt\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\caps0\scaps0\ltrch\loch\fs28 {\ltrch\loch\f0 Copyright(C) 2002 Jeda Research, Inc.}
\par }
\footery0{\*\footeryt1417\footerxl0\footerxr0\footeryh1700}{\footer \pard\plain \s77\margtsxn0\margbsxn62\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 
\par }
\cols2\colsx278\pgdscnxt2 First Page;}
{\pgdsc2\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn584\margrsxn584\margtsxn595\margbsxn1134\footery0{\*\footeryt1417\footerxl0\footerxr0\footeryh1700}{\footer \pard\plain \s65\brdrt\brdrs\brdrw1\brdrcf1\brsp28\brdrb\brdrs\brdrw1\brdrcf1\brsp28{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp28\cf1\sl300\slmult1{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs18 Atsushi{\ltrch\loch\f0  Kasuya\tab Indexes - Page {\field{\*\fldinst \\page}{\fldrslt VII}}}
\par }
\cols2\colsx278\pgdscnxt2 Index;}
{\pgdsc3\pgdscuse193\pgwsxn11905\pghsxn16837\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt3 Left Page;}
{\pgdsc4\pgdscuse194\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt4 Right Page;}
{\pgdsc5\pgdscuse195\lndscpsxn\pgwsxn12870\pghsxn6463\pgdscnxt5 Envelope;}
{\pgdsc6\pgdscuse195\pgwsxn11905\pghsxn16837\marglsxn1134\margrsxn567\margtsxn567\margbsxn567\pgdscnxt6 HTML;}
{\pgdsc7\pgdscuse195\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt7 Footnote;}
{\pgdsc8\pgdscuse195\pgwsxn11906\pghsxn16838\marglsxn1134\margrsxn1134\margtsxn1134\margbsxn1134\pgdscnxt8 Endnote;}}
{\*\pgdscno1}\paperh15840\paperw12240\margl584\margr584\margt595\margb1134\sectd\sbknone\pgwsxn12240\pghsxn15840\marglsxn584\margrsxn584\margtsxn3202\margbsxn2863\headery595{\header \pard\plain \s62\margtsxn2607\margbsxn1791\brdrt\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\brdrt\brdrs\brdrw1\brdrcf1\brsp85\brdrb\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85{\*\brdrb\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\caps0\scaps0\ltrch\loch\fs40 {\ltrch\loch\f0 Jeda, A New Functional Verification Language}
\par \pard\plain \s62\margtsxn2607\margbsxn1791\brdrt\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\caps0\scaps0\ltrch\loch\fs28 {\ltrch\loch\f0 Atsushi Kasuya, Jeda Research, Inc.}
\par \pard\plain \s62\margtsxn2607\margbsxn1791\brdrt\brdrs\brdrw1\brdrcf1\brsp85{\*\brdrt\brdlncol1\brdlnin0\brdlnout1\brdlndist0}\brsp85\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\tlswg8236}\tqc\tx4819{\*\tlswg8236}\tqr\tx9639{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b\caps0\scaps0\ltrch\loch\fs28 {\ltrch\loch\f0 Copyright(C) 2002 Jeda Research, Inc.}
\par }
\footery1134{\footer \pard\plain \s77\margtsxn2607\margbsxn1791\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 
\par }
\cols2\colsx278\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pard\plain \sb476\sa357\keepn\caps\f0\fs28\b\sl300\slmult1\qc\keep \s11\sb476\sa357\keepn\caps\cf1\sl300\slmult1\qc\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28\b {\ltrch\loch\f0 Abstract}
\par \pard\plain \s2\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 A new functional verification language, {\lang1033 Jeda}, is developed and released under GPL. Its clean object oriented design and concurrent programming support improves the productivity of the verification engineer. Its open source nature provides the cost effectiv
e solution for verification language choice, and enables the fufure expansion by the user community.}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 1. Introduction}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 As the gate count on ASIC/VLSI increases, and the synthesis{\lang1033  technology }gets more stable on transfering RTL design to gate, the importance of the verification has come to the main issue in the chip design process. The EDA servay shows that 74% of chip re-sp
in are due to the functional bugs, and 70% of the project time is spent on verification. The proper verification methodorogy is the key to first working silicon, and provide the product in time to market. }
\par {\ltrch\loch\f0 Jeda programming language is designed based on the experience of verification for more than a decade in various type of systems such as shared memory MP systems, distributed shared memory MP systems, and high performance router systems. In order to maximiz
e the productivity of the verification engineer, the{\lang1033  language }design is done with the following in mind:}
\par {\ltrch\loch\f0 -C like syntax for easy to learn}
\par {\ltrch\loch\f0 -{\lang1033 Verilog} like bit vector data support}
\par {\ltrch\loch\f0 -Interface to Verilog HDL}
\par {\ltrch\loch\f0 -Object oriented programming support}
\par {\ltrch\loch\f0 -Concurrent programming support}
\par {\ltrch\loch\f0 -Garbage collection support }
\par {\ltrch\loch\f0 -Best Pseudo random function}
\par {\ltrch\loch\f0 -Perl like string handling {\lang1033 functionality}}
\par {\ltrch\loch\f0 -User expandability  }
\par {\ltrch\loch\f0 Given the requirements above, we've designed and implemented Jeda HVL.}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 2. Jeda Program structure}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Jeda program{\lang1033  structure }is similar to that of C. All the executional part of the code is written as a function. The execution starts from a function named 'main'. }
\par {\ltrch\loch\f0 At the top level of the Jeda program, the following elements can be declared.}
\par {\ltrch\loch\f0 - global & local variable}
\par {\ltrch\loch\f0 - port and {\lang1033 portset} (interface to Velilog HDL)}
\par {\ltrch\loch\f0 - initial statement}
\par {\ltrch\loch\f0 - function}
\par {\ltrch\loch\f0 - class}
\par {\ltrch\loch\f0 The following program shows those elements as the code structure.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   int x, y. z ; // global variable}
\par {\ltrch\loch\f2   local int t ; // local variable}
\par {\ltrch\loch\f2   {\lang1033 inout} data_port ; // port}
\par {\ltrch\loch\f2   portset dbus \{  // portset}
\par {\ltrch\loch\f2     inout valid ;}
\par {\ltrch\loch\f2     inout [7:0] data ;}
\par {\ltrch\loch\f2   \}}
\par {\ltrch\loch\f2   initial \{  // initial statement}
\par {\ltrch\loch\f2     x = 100 ;}
\par {\ltrch\loch\f2   \}}
\par {\ltrch\loch\f2   main() \{  // function, main is the start point}
\par {\ltrch\loch\f2     printf( "Hello, world\\n" ) ;}
\par {\ltrch\loch\f2   \}}
\par {\ltrch\loch\f2   class point \{  // class}
\par {\ltrch\loch\f2     int x, y ;}
\par {\ltrch\loch\f2     void set( int ax, int ay ) \{}
\par {\ltrch\loch\f2       x = ax ;}
\par {\ltrch\loch\f2       y = ay ;}
\par {\ltrch\loch\f2     \}}
\par {\ltrch\loch\f2   \}}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 3. Primitive data types and array forms}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Jeda provides the following primitive data types:}
\par {\ltrch\loch\f0    int      -- 32 bit integer}
\par {\ltrch\loch\f0    bit      -- Verilog like multi-value bit vector. }
\par {\ltrch\loch\f0               It can be vectored as:}
\par {\ltrch\loch\f0                 bit [7:0] foo ;}
\par {\ltrch\loch\f0    string   -- String}
\par {\ltrch\loch\f0    float    -- single precision floating variable}
\par {\ltrch\loch\f0    double   -- double precision floating variable}
\par {\ltrch\loch\f0    signal   -- pointer to a port (interface to Verilog HDL)}
\par {\ltrch\loch\f0 Any data type (including the user defined class) can be declared in various array forms. }
\par {\ltrch\loch\f0  Array: statically allocated array }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2       int ar[5] ;}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0  Associative array: dynamically allocated array.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2       int asar[] ;}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 String index array: dynamic array{\lang1033  indexed }by a string}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2      int saar[*] ;}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 List: dynamically allocated list. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2      int alist<> ;  }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Various member functions can be used to the array data to access the state of the array. For example, the following member functions can be used for list data type:}
\par {\ltrch\loch\f0{\b push, pop, bpush, bpop, remove} \endash  {\lang1033 fifo}/stack access}
\par {\ltrch\loch\f0{\b send, receive, {\lang1033 timeout}} \endash  mail box access}
\par {\ltrch\loch\f0{\b enter, check_enter, ext} \endash {\lang1033  region }access}
\par {\ltrch\loch\f0{\b num_element} \endash {\lang1033  number }of ellement}
\par {\ltrch\loch\f0{\b sort} \endash  sort the elements{\b0  (only }for int and string list)}
\par 
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0   4. Port, {\lang1033 Portset} and Signal}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Jeda interfaces to the simulator (Verilog) world via a port. A port is defined like {\lang1033 verilog} port with keywords 'input', 'output', or 'inout'. A port can be declared anywhere outside functions. A port can be declared as a single bit, or vector. A port io di
rection should be one of the following: }
\par {\ltrch\loch\f0   input  -- port is input to Jeda. }
\par {\ltrch\loch\f0   output -- port is output from Jeda. }
\par {\ltrch\loch\f0   inout  -- port is inout to/from Jeda. }
\par {\ltrch\loch\f0 The port direction can be followed by the bit_range to specify a bus signal. It can take either big-{\lang1033 endian} [2:0] or small-endian bit order [0:2].  Non-zero {\lang1033 lsb} vector is also allowed (e.g. [5:3], [3:5]). }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f2\fs18 {\ltrch\loch\f2   input single ;  // single bit input}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f2\fs18 {\ltrch\loch\f2   output[3:0] nibble ; // 4 bit output }
\par {\ltrch\loch\f2   inout [7:0] a_bus ;  // 8 bit inout }
\par {\ltrch\loch\f2   inout [0:7] b_bus ;  // 8 bit s-endian}
\par {\ltrch\loch\f2   input [9:2] nz_i ;   // 8 bit non-zero lsb }
\par {\ltrch\loch\f2   output[2:9] nz_o ;   // non-zero lsb, s-endian}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 A reference to a port has two meanings, a pointer to the port, and the value on the port. Regular reference to a port name means the pointer to the port. The pointer can be stored to a signal variable for indirect access to the port.}
\par {\ltrch\loch\f0 Example:}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f6\fs18 {\ltrch\loch\f6   signal p_sig ; }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f6\fs18 {\ltrch\loch\f6   p_sig = a_bus ; // p_sig gets a ptr to a_bus}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 The access to the value of the port is done with 'depth' suffix ( '.n' where n is the integer number ).The depth must be 0 when a value is stored to the port.}
\par {\ltrch\loch\f0 Example:}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f6\fs18 {\ltrch\loch\f6   a_bus.0 = 8'hff ;   // driving a_bus }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f6\fs18 {\ltrch\loch\f6   i = single.0 ;      // sampling single}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 A port can have various attributes to determine how to interface to the simulator. Attributes can be added on the port declaration following to the port name.}
\par {\ltrch\loch\f0 Valid port{\lang1033  attributes }are:}
\par {\ltrch\loch\f0   Clock Attribute: specify the reference clock}
\par {\ltrch\loch\f0   Sample Attribute: specify the sample timing and depth}
\par {\ltrch\loch\f0   Drive Attribute: specify the drive timing}
\par {\ltrch\loch\f0 Skew value is the unit delay offset for sampling and driving from the reference clock edge. This mimics the F/F setup and propagation delay to avoid the racing condition. The depth N for sample attribute allows to the pipelined  values of the port. }
\par {\ltrch\loch\f0 When the attribute is omitted, the following default value is used:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18\ltrch\loch\f2\fs18 {\ltrch\loch\f2  @CLOCK sample posedge skew 0 depth 1}
\par {\ltrch\loch\f2         drive  posedge skew 1 ;}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f8\fs22 {\ltrch\loch\f8 Attributes only need to be added if the default values are needed to be changed. }
\par {\ltrch\loch\f8 Example: }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   input single @other_clock ; }
\par {\ltrch\loch\f2     // clock reference to other_clock }
\par {\ltrch\loch\f2   output [3:0] nibble drive {\lang1033 negedge} skew 2 ; }
\par {\ltrch\loch\f2     // @CLOCK is used }
\par {\ltrch\loch\f2   inout [7:0] a_bus sample negedge skew -2 ; }
\par {\ltrch\loch\f2     // @CLOCK, drive are default}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f6\fs18 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 Ports can be grouped with 'portset' to represent a logical collection of ports.}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f8\fs22 {\ltrch\loch\f8 Example: }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f2\fs18 {\ltrch\loch\f2    portset a_bus \{ }
\par {\ltrch\loch\f2      input clock ; }
\par {\ltrch\loch\f2      output [31:0] out_bus ; }
\par {\ltrch\loch\f2      inout  [31:0] bidi_bus ; }
\par {\ltrch\loch\f2    \}}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f8\fs22 {\ltrch\loch\f8 A port set can declared with portset attribute which becomes the default attributes for the port within the portset. Default attribute is effective to all the port within the portset, unless individual attribute on the port is specified. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   portset foo }
\par {\ltrch\loch\f6{\fs18\f6     }@fastclock }
\par {\ltrch\loch\f2     drive posedge skew 2 }
\par {\ltrch\loch\f2     sample posedge}
\par {\ltrch\loch\f2   \{ }
\par {\ltrch\loch\f2     inout [7:0] data ;     }
\par {\ltrch\loch\f2       // fastclock is used, drive posedge skew 2 }
\par {\ltrch\loch\f2     input [5:0] command ;  }
\par {\ltrch\loch\f2       // fastclock is used, sample posedge }
\par {\ltrch\loch\f2     input [2:0] error @ slowclock ; }
\par {\ltrch\loch\f2       // overwritten to slowclock, sample posedge }
\par {\ltrch\loch\f2   \}}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 Access to the port in portset is done with '.' operator. Reference without depth represent the pointer value of the port.}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f8\fs22 {\ltrch\loch\f8 Example:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18{\ltrch\loch\f2  {\fs18\f6  signal  sig_a ; }}
\par {\ltrch\loch\f2{\b0   }sig_a = foo.data ;}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi0{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f6\fs18 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 To access the value of the port, depth must be used as:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   <p{\fs18\f6 ortset>.<port>.0 : regular access to the data }}
\par {\ltrch\loch\f2   <portset>.<port>.n  : data of n-th pipeline}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 Signal is the Jeda data type that can store the pointer to a port. When a signal variable is declared, it is empty and needed to be assigned a port (pointer).}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f8\fs22 {\ltrch\loch\f8 Example:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   signal sig ; }
\par {\ltrch\loch\f2   sig = foo.data ; }
\par {\ltrch\loch\f2     // foo is portset, data is a port }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0           }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 Sub-bit information of the port can also be specified at the store. Then, the access to the signal value is done on the sub-bit of the port.}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f8\fs22 {\ltrch\loch\f8 Example:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   signal sub_sig ; }
\par {\ltrch\loch\f2   sub_sig = foo.data[2:0] ; }
\par {\ltrch\loch\f2   if( sub_sig.0 == 3'b000 ) }
\par {\ltrch\loch\f2     // same as foo.data[2:0] == 3'b000 }
\par {\ltrch\loch\f2   \{ }
\par {\ltrch\loch\f2     .. }
\par {\ltrch\loch\f2   \}}
\par 
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 5. Expression}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 Expression is the mechanism to express the data value in the program code. {\lang1033 Jeda's} expressions are similar to that of C, Verilog and Java. The major difference from those ordinally programming languages is the timed expression, which evaluate the value with
 the cycle element. There are two types of basic timed expression.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2     @delay, window ( <expression_list> )}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 This timed expression seeks for the given expression list becomes true within the given cycle time window.}
\par {\ltrch\loch\f0 @@delay, window( <expression_list> )}
\par {\ltrch\loch\f0 This timed expression checks if the given expression list is always true or not.}
\par {\ltrch\loch\f0 Example:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2     if( @0,100( sigs.a.0 == 2'b00 ) ) }
\par {\ltrch\loch\f2               printf( "zee!\\n" ) ; }
\par {\ltrch\loch\f2     if( !@0,100( sigs.a.0 == 2'b01 ) ) }
\par {\ltrch\loch\f2               error( "sig.a.0 != 2'b01\\n" ) ;}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Multiple timed expressions can be evaluated concurrently with p_and and p_or operators. p_and provides the logical and of the concurrent evaluations, while p_and provides the logical or of the concurrent evaluations.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   if( p_and( @0,5( p.vld == 1'b1), }
\par {\ltrch\loch\f2              @0,5( p.a == 4'b1110 ) ) }
\par {\ltrch\loch\f2     error( \ldblquote boo\\n\rdblquote ) ;}
\par 
\par {\ltrch\loch\f2   if( p_or( @0,5( p.a == 4'b0110), }
\par {\ltrch\loch\f2             @0,5( p.a == 4'b1110) ) ) }
\par {\ltrch\loch\f2     printf( \ldblquote got p.a value\\n\rdblquote  ) ;}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 6. Statement}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 Statement is the minimum unit of execution in Jeda code. The types of statement supported in Jeda is a mixture of what we use in C, Verilog, and Java. For example, Jeda has if/else, while, do/until, repeat, case, casex, and casez statements for flow contro
l. It also has break and continue with label. But it does not support goto and switch statements which are known to be dangerous. }
\par {\ltrch\loch\f0 As of the expression case, any  statement can have the cycle element that specifies the cycle delay before the statement is executed.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   int a, b, c ; }
\par {\ltrch\loch\f2   @5 (posedge sig.clk) a = 5 ; }
\par {\ltrch\loch\f2     // wait for 5 posedge of sigs.clk, }
\par {\ltrch\loch\f2     //   then assign 10 to a }
\par {\ltrch\loch\f2   @5 b = 5 ;  }
\par {\ltrch\loch\f2     // wait for 5 posedge of internal clock, }
\par {\ltrch\loch\f2     //    then assign 10 to b}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18\ltrch\loch\f8\fs22 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 When a port assignment is used with cycle delay, the driving edge for the port is used as the default clock. Non-blocking assignment '<=' operator can be used to schedule the drive without waiting. This is only allowed for assignment to a port.}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22\li0\ri0\fi10789\sa57{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}\ltrch\loch\f8\fs22 {\ltrch\loch\f8 Example:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   @5 sigs.a <= 2'b00 ; }
\par {\ltrch\loch\f2     // use drive edge of sigs.a, }
\par {\ltrch\loch\f2     //    non-blocking assignment }
\par 
\par {\ltrch\loch\f2   @0 sigs.b = 1'b1 ; }
\par {\ltrch\loch\f2     // not wait if it's on the edge}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 7. Function}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Function (and member function/methods in class) is the body of execution in the Jeda program. All the Jeda function have a type, and returns the a value for the given type unless declared as void. Any Jeda program  starts from the function main().  This fu
nction should be of type void, and should not accept any values for arguments. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2          void main() \{ }
\par {\ltrch\loch\f2            . }
\par {\ltrch\loch\f2          \}}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 All other functions besides main() can have any type, and can take fixed number of arguments. When function type is omitted Jeda makes the return type void. When a function takes a return value (non-void function), the value is returned with return stateme
nt. Jeda checks that the return value is correctly set at runtime.}
\par {\ltrch\loch\f0 Argument to a function can be a single value, or entire array can be passed as an{\lang1033  argunment. }}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   // function with array arguments }
\par {\ltrch\loch\f2   int foo( int x, int y[10], int z[] ) \{ }
\par {\ltrch\loch\f2    .. }
\par {\ltrch\loch\f2   \} }
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Argument value is usually copied to the local space and passed to the function. This is true even the array argument to avoid the possible side effect. When '{\lang1033 var}' attribute is used on argument declaration, the argument will be passed as pointer, and the sp
ace of the variable is shared with caller. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   // function with var argument }
\par {\ltrch\loch\f2   int foo( }
\par {\ltrch\loch\f2     var bit [5:0] x, }
\par {\ltrch\loch\f2     var bit [7:0] y[10], }
\par {\ltrch\loch\f2     var int z[] }
\par {\ltrch\loch\f2   )}
\par {\ltrch\loch\f2   \{ }
\par {\ltrch\loch\f2     .. }
\par {\ltrch\loch\f2   \} }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Functions can define the default values to their argument using  assignments.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   int bar( }
\par {\ltrch\loch\f2     int x = 0, int y = 0, int z = 0 }
\par {\ltrch\loch\f2   ) \{ }
\par {\ltrch\loch\f2     .. }
\par {\ltrch\loch\f2   \} }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Jeda  provides a short-hand notation for the function caller to specify using the default values using '*' in place of of the argument.  }
\par {\ltrch\loch\f0 In the case the calling argument is fewer than the functional declaration, the calling arguments are applied from the top, and then the default argument is used to the remained arguments. (The missing part of the default argument must be declared in this c
ase.) This is a{\lang1033  powerful }mechanism to extend the functionality without rewrighting existing code. If the default value does not change the original behavior, the additional argument can be added at the end of the argiment list.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   void main() \{ }
\par {\ltrch\loch\f2     bar();      // same as bar( 0, 0, 0 ) ; }
\par {\ltrch\loch\f2     bar(*,*,5); // same as bar( 0, 0, 5 ) ; }
\par {\ltrch\loch\f2     bar(1);     // same as bar( 1, 0, 0 ) ; }
\par {\ltrch\loch\f2     bar(1,2);    // same as bar( 1, 2, 0 ) ; }
\par {\ltrch\loch\f2     bar(1, 2, 3) ; }
\par {\ltrch\loch\f2   \}}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 8. Class}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Class is a correction of member data and member functions that defines the behavior of the class object. The special function 'new' is used as the class constructor. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   Class foo_class \{}
\par {\ltrch\loch\f2     int x, y ;}
\par {\ltrch\loch\f2     void new() \{}
\par {\ltrch\loch\f2       x = 0 ;}
\par {\ltrch\loch\f2       y = 0 ;}
\par {\ltrch\loch\f2     \}}
\par {\ltrch\loch\f2   \}}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The defined class becomes the user defined data type. The instance of the class is created when new function is called and{\lang1033  assigned }to the class variable. The instance of the class is handled as the pointer. The assignment of the instance into multiple var
iables shares the actual instance body of the class.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   foo_class foo ;}
\par {\ltrch\loch\f2   foo_class foobar ;}
\par {\ltrch\loch\f2   foo = new ;  // create a new instance}
\par {\ltrch\loch\f2   foobar = foo ; }
\par {\ltrch\loch\f2     // foo & foobar point the same object}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Jeda's class supports the single inheritance. A class can be extended with keyword 'extends'. The new class inherits all the members from its parent. Any members can be redefined in the child class unless it's declared 'final' in the parent. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   mymy_class extends my_class \{ }
\par {\ltrch\loch\f2     int boo ; }
\par {\ltrch\loch\f2     int bee ; }
\par {\ltrch\loch\f2     int sum() \{ }
\par {\ltrch\loch\f2        return boo + bee ; }
\par {\ltrch\loch\f2      \} }
\par {\ltrch\loch\f2    \}}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The extended class instance and its parent class instance can be assigned in either direction (up-cast and down-cast). For down-cast, the class type correctness is checked at runtime as it is not clear if the parent instance is holding the extended class i
nstance of the destination at the compilation time. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   class foo_class \{ }
\par {\ltrch\loch\f2    .. }
\par {\ltrch\loch\f2   \} }
\par {\ltrch\loch\f2   class bar_class extends foo_class \{ }
\par {\ltrch\loch\f2    .. }
\par {\ltrch\loch\f2   \} }
\par {\ltrch\loch\f2   void yoo() \{ }
\par {\ltrch\loch\f2     foo_class foo ; }
\par {\ltrch\loch\f2     bar_class bar ; }
\par {\ltrch\loch\f2     bar_class boo ; }
\par 
\par {\ltrch\loch\f2     bar = new ; }
\par 
\par {\ltrch\loch\f2     foo = bar ; // up-cast }
\par {\ltrch\loch\f2     boo = foo ; // down-cast }
\par {\ltrch\loch\f2   \}}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 An abstract class can be used to set a common frame work for a set of object, with{\lang1033  abstract }function(s) to be defined on child class. This mechans is usefull to use a common interface to various types of object from the same code. The example used in rando
m generation will be shown in the later chapter. }
\par {\ltrch\loch\f0 Another special class definition{\lang1033  mechanism }in Jeda is overwrite attribute on member function. Sometime, a class is already written, and we may want to extend it with just rewriting one function. Just redefining a new function in the extended class can hand
le the external call to the function. But if the parent class is calling the function by itself, the parent's code is still calling the original function in it's member. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   class parent \{ }
\par {\ltrch\loch\f2      void foo() \{ }
\par {\ltrch\loch\f2        printf( "parent foo called\\n" ) ; }
\par {\ltrch\loch\f2      \} }
\par {\ltrch\loch\f2      void bar() \{ }
\par {\ltrch\loch\f2        foo() ; }
\par {\ltrch\loch\f2      \} }
\par {\ltrch\loch\f2    \} // end of class parent }
\par 
\par {\ltrch\loch\f2    class child extends parent \{ }
\par {\ltrch\loch\f2      void foo() \{ }
\par {\ltrch\loch\f2        printf( "child foo called\\n" ) ; }
\par {\ltrch\loch\f2      \} }
\par {\ltrch\loch\f2    \}}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 When a child instance called the function bar, the parent class's foo() is called from the bar() function even child has foo() function redeclared. When a function is redeclared with 'overwrite' attribute, the child's function is referenced from it's paren
t as well. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   class child_a extends parent \{ }
\par {\ltrch\loch\f2     overwrite void foo() \{ }
\par {\ltrch\loch\f2        print( "child foo called\\n" ) ; }
\par {\ltrch\loch\f2     \} }
\par {\ltrch\loch\f2   \}}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 9. Concurrent programming}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The user can start the concurrent thread with fork/join. It will run the statements between fork join pair. There are three different way of closing fork:}
\par {\ltrch\loch\f0 fork join \endash  wait for all the threads completion}
\par {\ltrch\loch\f0 fork knife \endash  proceed without waiting for threads}
\par {\ltrch\loch\f0 fork spoon \endash  proceed when one of the threads completed}
\par {\ltrch\loch\f0 With fork knife, the user can create the thread and move forward without the{\lang1033  completion. }This is usefull to create a monitor thread that stays in the system. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   fork }
\par {\ltrch\loch\f2     // monitor thread }
\par {\ltrch\loch\f2     forever \{ }
\par {\ltrch\loch\f2       @1 vld = pio_bus.vld ;}
\par {\ltrch\loch\f2       data = pio_bus.data ;}
\par {\ltrch\loch\f2       if( vld ) \{}
\par {\ltrch\loch\f2         ..}
\par {\ltrch\loch\f2       \}}
\par {\ltrch\loch\f2     \} }
\par {\ltrch\loch\f2   knife // move forward without child }
\par {\ltrch\loch\f2  }
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The terminate statement terminates all the child threads. The thread_join() function will wait for the{\lang1033  completion }of all the child threads. Using another level of fork join block to limit the depth of its child, the user can control the threads that effect
ed by both terminate and thread.}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   Fork   // control terminate }
\par {\ltrch\loch\f2     func_a() ;  // thread will be created }
\par {\ltrch\loch\f2     func_b() ;  // thread will be created}
\par {\ltrch\loch\f2     \{}
\par {\ltrch\loch\f2       @100( posedge CLOcK ) ; // delay 100 cycle}
\par {\ltrch\loch\f2       terminate ;}
\par {\ltrch\loch\f2     \}}
\par {\ltrch\loch\f2   join}
\par 
\par {\ltrch\loch\f2   Fork   // control terminate }
\par {\ltrch\loch\f2     func_a() ;  // thread will be created }
\par {\ltrch\loch\f2     func_b() ;  // thread will be created}
\par {\ltrch\loch\f2     \{}
\par {\ltrch\loch\f2       @100( posedge CLOcK ) ; // delay 100 cycle}
\par {\ltrch\loch\f2       thread_join() ;}
\par {\ltrch\loch\f2     \}}
\par {\ltrch\loch\f2   join}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 To support the concurrent programming, event and{\lang1033  semaphore }is provided as the system classes in Jeda. }
\par {\ltrch\loch\f0 Event is the variable to transfer the synchronous{\lang1033  timing. }It has the member functions: trigger(), trigger_on(), trigger_off(), trigger_pulse(), sync(), sync_clear(), check(), check_clear(), timeout().}
\par {\ltrch\loch\f0 Semaphore is the variable to hold unit(s) for synchronization and mutex. It has the member functions: get(), check(), put(), timeout(). }
\par {\ltrch\loch\f0 The list of any data type can be used as the mailbox, or the region. As a {\lang1033 mailbox}, the following member functions can be used: send(), receive(), num_element(), timeout(). As the region, the following member functions can be used: enter(), check_enter(), e
xit(), timeout(). The following code shows how a list can be used as the mailbox. }
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2 int in_queue<> ; }
\par {\ltrch\loch\f2 int out_queue<> ; }
\par {\ltrch\loch\f2 int max_in = 0 ; }
\par {\ltrch\loch\f2 int max_out = 0 ; }
\par {\ltrch\loch\f2 ..}
\par {\ltrch\loch\f2 void process_loop() \{ }
\par {\ltrch\loch\f2   int id ; }
\par {\ltrch\loch\f2   int dly ; }
\par 
\par {\ltrch\loch\f2   fork }
\par {\ltrch\loch\f2   forever }
\par {\ltrch\loch\f2   \{ }
\par {\ltrch\loch\f2     id = in_queue.receive() ; }
\par {\ltrch\loch\f2       // assume someone is sending }
\par {\ltrch\loch\f2     printf( }
\par {\ltrch\loch\f2       "Got task id %d at %d\\n", id, get_cycle() }
\par {\ltrch\loch\f2     ) ; }
\par {\ltrch\loch\f2     dly = randmt() % 10 ; }
\par {\ltrch\loch\f2     @dly ; // random delay of u[0:9] }
\par {\ltrch\loch\f2     out_queue.send( id ) ;  // this job is done, }
\par {\ltrch\loch\f2       // also assume someone is receiving }
\par {\ltrch\loch\f2   \} }
\par {\ltrch\loch\f2   knife }
\par {\ltrch\loch\f2 \} }
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 10. System Functions}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0  The following list shows the major system functions in Jeda.}
\par \pard\plain \s1\cf1\sl300\slmult1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 Concurrent Control Functions:}
\par {\ltrch\loch\f0   thread_pause(), thread_join()}
\par {\ltrch\loch\f0 Random Functions:}
\par {\ltrch\loch\f0   random(), urandom(), rand48(), urand48()}
\par {\ltrch\loch\f0 Print and Report Functions:}
\par {\ltrch\loch\f0   printf(), error(), warning(), assert()}
\par {\ltrch\loch\f0 String Handling Functions:}
\par {\ltrch\loch\f0   sprintf(), substring(), strlen(), atoi(), abintobit(), }
\par {\ltrch\loch\f0   aocttobit(), ahextobit(), bit2string()}
\par {\ltrch\loch\f0 Simulator Functions:}
\par {\ltrch\loch\f0   get_cycle(), get_time(), get_plusarg(), unit_delay(),}
\par {\ltrch\loch\f0   exit()}
\par {\ltrch\loch\f0 System Function:}
\par {\ltrch\loch\f0   system_exec()}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 11. System Classes}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The following list shows the major system classes in Jeda. (Note that array forms of variables have various member functions as well.)}
\par {\ltrch\loch\f0 Random classes:}
\par {\ltrch\loch\f0   random_mt, random_48, geom_random, exp_random,}
\par {\ltrch\loch\f0   pdf_random}
\par {\ltrch\loch\f0 Concurrent programming support:}
\par {\ltrch\loch\f0   event, semaphore}
\par {\ltrch\loch\f0 Utility classes}
\par {\ltrch\loch\f0   file, regexp (regular expression engine class), }
\par {\ltrch\loch\f0   ip_class (Internet domain socket class)}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 12. User Extension}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 The system functions and classes explained in the previous chapter are implemented with the{\lang1033  extension }mechanism of the language. With this mechanism, the user can add the user defined function and classes to the language easily. The extention can be done i
n two steps:}
\par {\ltrch\loch\f0 1) Define the extern function or classes in Jeda code. Jeda provides the regular expression mechanism to{\lang1033  specify }the arguments of the function. For example, printf is defined as:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   printf( string, (?)* ) ;}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22{\*\hyphen2\hyphlead4\hyphtrail4\hyphmax0}{\ltrch\loch\f0 2) Write the C code that implement the user defined function or class. Then compile it to the{\lang1033  extension }object file (.o).}
\par {\ltrch\loch\f0 Then, the user can specify the extern definition header file (with -U option) on the Jeda code compilation, and link the{\lang1033  extension }object file together with the other jeda object. }
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 13. ATM Switch Verification Example}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The ATM switch verification example is provided in the web suite {{\field{\*\fldinst HYPERLINK "" }{\fldrslt \*\cs131\cf2\ul\rtlch\ltrch\dbch\loch\f1\fs24\lang1033 www.jeda.org}}}. The DUT used in the example was taken from Janick Bergeron's Verification Guild Project {{\field{\*\fldinst HYPERLINK "" }{\fldrslt \*\cs131\cf2\ul\rtlch\ltrch\dbch\loch\f1\fs24\lang1033 www.janick.bergeron.com/guild/project.html}}}, which was provided as the verification demons
tration.}
\par 
\par 
\pard\plain\absw5412\absh3465\nowrap\pvpara\posyt\phcol\posxc{\*\flymaincnt160\flyvert24673\flyhorz25090\flyanchor0\flycntnt}{{\field\fldpriv{\*\fldinst{\\import jeda_paper_rtf_m302e00a6.gif}}{\fldrslt }}}
\pard
\pard\plain \s80\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0                   Fig. 1 Testbench Structure}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The testbench structure is shown in Fig 1. It uses stimulus-{\lang1033 response} type modeling with a simple destination prediction model. Once a cell is sent to DUT, it expects to come out by the order per source/destination pair. }
\par {\ltrch\loch\f0 To{\lang1033  fulfill }the required test cases, the testbench is required to have the following functionalities.}
\par {\ltrch\loch\f0 ability to drive a cell to a port in various timing}
\par {\ltrch\loch\f0{\lang1033 ability} to drive cells concurrently to multiple port }
\par {\ltrch\loch\f0 mechanism to create output port conflict situation }
\par {\ltrch\loch\f0 mechanism to control the transmit side speed }
\par {\ltrch\loch\f0 mechanism to inject error cells }
\par {\ltrch\loch\f0 mechanism for random }
\par {\ltrch\loch\f0    With the{\lang1033  powerful }concurrent programing support, and queue modeling ability in Jeda, implementing the functionalities above was not a difficult task. (see the web suite for the detailed report) }
\par {\ltrch\loch\f0 To implement the random distribution function, the example uses the abstract class 'random_distribution' as:}
\par \pard\plain \s123\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f2\fs18 {\ltrch\loch\f2   abstract class random_distribution \{ }
\par {\ltrch\loch\f2     abstract int gen_random() ; }
\par {\ltrch\loch\f2     abstract void get_mean(}
\par {\ltrch\loch\f2       var int mean_num_result, }
\par {\ltrch\loch\f2       var int mean_denom_result}
\par {\ltrch\loch\f2     ); }
\par {\ltrch\loch\f2   \}}
\par 
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The actual random distribution classes are defined as the child class of 'random_distribution class. }
\par {\ltrch\loch\f0   uniform_distribution class }
\par {\ltrch\loch\f0   constant_distribution class }
\par {\ltrch\loch\f0   constant_loop_distribution class }
\par {\ltrch\loch\f0   geometric_distribution class }
\par {\ltrch\loch\f0   {\lang1033 exponential}_distribution class }
\par {\ltrch\loch\f0   pdf_distribution class }
\par {\ltrch\loch\f0 In the random test, the variable of abstract class is used to hold various random pattern generation, and actual instance is selected with plus arguments upon the execution and stored to the abstract class variable as a polimorphic child instance. Calling 
gen_random() function provides the different type of random distribution based on the child type.}
\par {\ltrch\loch\f0 The entire development of the code and debug (both Jeda & Verilog) takes about 2 days. This Jeda testbench detected a bug in the utopia1_atm_rx.v at the first transfer test.(No other{\lang1033  participants }did the actual transfer test in their report.) This is a goo
d demonstration of how we can systematically construct an effective testbench with Jeda.}
\par \pard\plain \s10\sb240\sa120\keepn\cf1\sl300\slmult1\keep{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs28 {\ltrch\loch\f0 14 Conclusion and Future Work}
\par \pard\plain \s3\li0\ri0\fi283\sa119\cf1\sl288\slmult1\qj{\*\hyphen3\hyphlead4\hyphtrail4\hyphmax0}\aspalpha\rtlch\af9\afs24\lang255\ltrch\dbch\af7\afs24\langfe255\loch\f0\fs22 {\ltrch\loch\f0 The basic functionalities of JEDA programming language is shown in this paper. It's simple and clean object oriented language design and{\lang1033  powerful }concurrent programming support improve the productivities of users for writing the functional verification tes
tbench. It is also a usefull tool to prototype the ASIC/System functional model with it's ability to model queues. }
\par {\ltrch\loch\f0 Jeda is being extended with the Aspect Oriented Programming support, and Sugar formal Property Language support. Other utility classes, and various drivers are also under development. }
\par {\ltrch\loch\f0 Source code, user's manual, and the example shown in this paper is available in the complete form at {{\field{\*\fldinst HYPERLINK "http://www.jeda.org/" }{\fldrslt \*\cs131\cf2\ul\rtlch\ltrch\dbch\loch\f1\fs24\lang1033 http://www.jeda.org}}}. }
\par 
\par {\ltrch\loch\f0 References:}
\par 
\par }