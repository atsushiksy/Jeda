#  Vinst Parser Action code
#   
#  
#  Copyright (C) 1999, 2000, 2001 Juniper Networks Inc.
#  Copyright (C) 2002 Jeda Technologies, Inc.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.  
#   

#########################################
#   commonly used actions
#########################################

<<DDeq0>>
{
  $$ = 0 ;
}

<<DDeq1>>
{
  $$ = 1 ;
}

<<DDeqD1>>
{
  $$ = $1 ; 
}

<<DDeqD2>>
{
  $$ = $2 ; 
}

<<DDeqD3>>
{
  $$ = $3 ; 
}

<<DDeqNULL>>
{
  $$ = NULL ;
}

<<VcodeChain>>
{
  /* VcodeChain */
  int *pp = NULL ;
  vcode_info *last = $1 ;
  if( JD_first_inst == NULL ) JD_first_inst = $1 ;
  if( $1 ) {
    while(last->next) {
      if( last == $2 ) {
        printf( "VcodeChain loop detected\n" ) ;
        *pp = 0 ;
      }
      last = last->next ;
    }
    last->next = $2 ;
    $$ = $1 ;
  }
  else $$ = $2 ;
}

<<VcodeChain3>>
{
  /* VcodeChain */
  vcode_info *last = $1 ;
  if( $1 ) {
    while(last->next) last = last->next ;
    last->next = $3 ;
    $$ = $1 ;
  }
  else $$ = $3 ;
}

<<Vinst>>
{
  $$ = $1 ;
  if( $$ ) {
    $$->filename = (char *)input_file_name ;
    $$->linenum = lex_line_num-1 ;
  }
}

<<VinstChain>>
{
  /* VinstChain */
  vinst_info *last = $1 ;
  if( $1 ) {
    while(last->next) {
      last = last->next ;
    }
    last->next = $2 ;
    $$ = $1 ;
  }
  else $$ = $2 ;
  if( $2 ) {
    $2->filename = (char *)input_file_name ;
    $2->linenum = lex_line_num-1 ;
  }
}

<<NameChain>>
{
  /* NameChain */
  JD_name *last = $1 ;
  if( $1 ) {
    while(last->next) {
      last = last->next ;
    }
    last->next = $2 ;
    $$ = $1 ;
  }
  else $$ = $2 ;
}

<<DDeqVcodeAttrib>>
{
  /* DDeqVcodeAttrib */
  $$ = ALLOC(vcode_info) ;
  $$->is.attrib = $1 ;
}

<<DDeqVcodeName>>
{
  /* DDeqVcodeName */
  $$ = ALLOC(vcode_info) ;
  $$->is.name = $1 ;
}

#########################################
#   Header Info
#########################################


<<inital_header>>
{
  /* inital_header */
  int version, revision ;
  
  version = atoi($2.name) ;
  revision = atoi($3.name) ;
  
  if( version > 0 && revision > 0 ) {
    /* do the version & revision consistency check */
    /* TBI */ 
  
  }
  
}

#########################################
#   Top Level Info
#########################################
<<object_file>>
{
  /* object_file */
  JD_top_inst = $$ = $1 ;
}

<<ObjectChain>>
{
  /* ObjectChain */
  vcode_info *last = $1 ;
  if( $1 ) {
    while(last->next) last = last->next ;
    last->next = $2 ;
    $$ = $1 ;
  }
  else JD_top_inst = $$ = $2 ;
}

<<top_port_info>>
{
  /* top_port_info */
  JD_name *name ;
  $$ = $1 ; 
  name = find_global_name( $$->is.port.name ) ;
  if( !name ) {
    name = add_global_name( $$->is.port.name ) ;
    name->info = $$ ;
    name->type = JD_port_name ;
    $$->code_name = name ;
  }
  else {
    if( name->type != JD_port_name ) {
      ERROR_PORT_NAME_TYPE_MISMATCH( $$->is.port.name ) ;
    }
    else if( !comp_info( name->info, $$ ) ) {
      ERROR_PORT_NAME_ATTRIB_MISMATCH( $$->is.port.name ) ;
    }
    $$ = NULL ;
  }
}

<<top_portset_info>>
{
  /* top_portset_info */
  JD_name *name, *ptname ;
  vcode_info *pt ;
  int lflag = 1 ;
  $$ = $1 ; 
  name = find_global_name( $$->is.portset.name ) ;
  if( !name ) {
    name = add_global_name( $$->is.portset.name ) ;
    name->info = $$ ;
    name->type = JD_portset_name ;
    pt = $$->is.portset.port_infos ;
    while( pt ) {
      ptname = add_name_to_scope( pt->is.port.name, &name->child ) ;
      ptname->type = JD_port_name ;
      ptname->info = pt ;
      pt->is.port.portset = $$ ;
      pt->code_name = ptname ;
      pt = pt->next ;
    }
  }
  else {
    if( name->type != JD_portset_name ) {
      ERROR_PORTSET_NAME_TYPE_MISMATCH( $$->is.portset.name ) ;
    }
    comp_portset_info( $$, name ) ;
    $$ = NULL ;
  }
}

<<top_variable_dcl>>
{
  /* top_variable_dcl */
  JD_name *name ;
  vcode_info *attrib ;
  
  $$ = $1 ; 
  attrib = $1->is.variable_dcl.var_attrib ;
  if( attrib && attrib->is.attrib.is_local )
    name = find_local_name( $$->is.variable_dcl.name ) ;
  else
    name = find_global_name( $$->is.variable_dcl.name ) ;
  
  if( name ) {
    if( name->type != JD_variable_name ) {
      ERROR_VARIABLE_NAME_TYPE_MISMATCH( $$->is.variable_dcl.name ) ;
    }
    else if( !comp_info( name->info, $$ ) ) {
      ERROR_VARIABLE_NAME_ATTRIB_MISMATCH( $$->is.variable_dcl.name ) ;
    }
    $$ = NULL ;
  }
  else {
    if( attrib && attrib->is.attrib.is_local ) {
      name = add_local_name( $$->is.variable_dcl.name ) ;
    }
    else {
      name = add_global_name( $$->is.variable_dcl.name ) ;
    }
    name->type = JD_variable_name ;
    name->info = $$ ;
    $$->code_name = name ;
  }
}

<<top_enum_dcl>>
{
  /* top_enum_dcl */
  JD_name *name, *mnname ;
  vcode_info *mn ;
  int  index ;
  $$ = $1 ;
  name = find_global_name( $1->is.enum_dcl.name ) ;
  if( !name ) {
    name = add_global_name( $1->is.enum_dcl.name ) ;
    name->info = $1 ;
    name->type = JD_enum_name ;
    mn = $1->is.enum_dcl.members ;
    index = 0 ;
    while( mn ) {
      mnname = add_name_to_scope( mn->is.string, &name->child ) ;
      mnname->info = mn ;
      mnname->type = JD_enum_member_name ;
      mnname->index = index++ ;
      mn = mn->next ;
    }
  }
  else {
    if( name->type != JD_enum_name ) {
      ERROR_ENUM_NAME_TYPE_MISMATCH( $1->is.enum_dcl.name ) ;
    }
    comp_enum_info( $1, name ) ;
    $$ = NULL ;
  }

}

<<top_function_info>>
{
  /* top_function_info */
  JD_name *name ;
  vcode_info *mn, *attrib ;
  
  $$ = $1 ;
  attrib = $1->is.function_info.func_options ;
  if( attrib && attrib->is.attrib.is_local )
    name = find_local_name( $$->is.function_info.name ) ;
  else
    name = find_global_name( $$->is.function_info.name ) ;
  if( !name ) {
    if( attrib && attrib->is.attrib.is_local )
      name = add_local_name( $1->is.function_info.name ) ;
    else
      name = add_global_name( $1->is.function_info.name ) ;
    name->info = $1 ;
    if( $1->is.function_info.sys_flag ) name->type = JD_sys_func_name ;
    else name->type = JD_func_name ;
  }
  else {
    if( name->type != JD_func_name ) {
      ERROR_FUNCTION_NAME_TYPE_MISMATCH( $1->is.function_info.name ) ;
    }
    comp_func_info( NULL, $1, name->info ) ;
    $$ = NULL ;
  }

}

<<top_class_info>>
{
  /* top_class_info */
  JD_name *name, *mname ;
  vcode_info *mn, *attrib ;

  $$ = $1 ;
  attrib = $1->is.class.attribs ;
  if( attrib && attrib->is.attrib.is_local )
    name = find_local_name( $1->is.class.name ) ;
  else
    name = find_global_name( $1->is.class.name ) ;
  if( !name ) {
    if( attrib && attrib->is.attrib.is_local ) 
      name = add_local_name( $1->is.class.name ) ;
    else 
      name = add_global_name( $1->is.class.name ) ;
    name->info = $1 ;
    if( $1->is.class.sys_flag ) name->type = JD_sys_class_name ;
    else name->type = JD_class_name ;
    /* add member name to the class scope */
    mn = $1->is.class.members ;
    while( mn ) {
      mname = add_name_to_scope( get_info_name( mn ), &name->child ) ;
      mname->type = get_info_type( mn ) ;
      mname->info = mn ;
      mname->index = mn->index ;
      mn = mn->next ;
    }
  }
  else {
    if( name->type != JD_class_name ) {
      ERROR_CLASS_NAME_TYPE_MISMATCH( $1->is.class.name ) ;
    }
    (void)comp_class( $1, name ) ;
    $$ = NULL ;
  }

}

<<top_verilog_task_info>>
{
  /* top_verilog_task_info */
  JD_name *name ;
  vcode_info *mn ;
  
  $$ = $1 ;
  /* verilog task needs its own name scope */
  name = find_verilog_name( $1->is.function_info.name ) ;
  if( !name )
  {
    name = add_verilog_name( $1->is.function_info.name ) ;
    name->info = $1 ;
    name->type = JD_verilog_task_name ;
    $$->code_name = name ;
  }
  else {
    if( name->type != JD_verilog_task_name ) {
      ERROR_FUNCTION_NAME_TYPE_MISMATCH( $1->is.function_info.name ) ;
    }
    comp_veri_task_info( $1, name->info ) ;
    $$ = NULL ;
  }

}

<<top_aspect_info>>
{
  /* top_aspect_info */
  JD_name *name, *mname ;
  vcode_info *mn, *attrib ;

  $$ = $1 ;
  name = find_global_name( $1->is.class.name ) ;
  if( !name ) {
    name = add_global_name( $1->is.class.name ) ;
    name->info = $1 ;
    name->type = JD_aspect_name ;
    /* add member name to the class scope */
    mn = $1->is.class.members ;
    while( mn ) {
      mname = add_name_to_scope( get_info_name( mn ), &name->child ) ;
      mname->type = get_info_type( mn ) ;
      mname->info = mn ;
      mname->index = mn->index ;
      mn = mn->next ;
    }
  }
  else {
    if( name->type != JD_aspect_name ) {
      ERROR_ASPECT_NAME_TYPE_MISMATCH( $1->is.function_info.name ) ;
    }
    (void)comp_aspect( $1, name ) ;
    $$ = NULL ;
  }

}

#########################################
#   Port Info
#########################################

<<port_info>>
{
  /* port_info */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_port_info ;
  $$->is.port.direction = $2 ;
  $$->is.port.ub = atoi($4.name) ;
  $$->is.port.lb = atoi($6.name) ;
  $$->is.port.name = $8.name ;
  $$->is.port.attribs = $9 ;
}

<<port_access_attrib>>
{
  /* port_access_attrib */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_port_access_attrib ;
  $$->is.port_access_attrib.drive_sample = $1 ;
  $$->is.port_access_attrib.edge = $2 ;
  $$->is.port_access_attrib.skew = $4 ;
}

<<depth>>
{
  /* depth */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_port_depth_attrib ;
  $$->is.int_value = atoi($2.name) ;
}

<<path>>
{
  /* path */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_port_path_attrib ;
  $$->is.string = $2.name ;
}

<<port_clock_attirb>>
{
  /* port_clock_attirb */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_port_clock_attrib ;
  $$->is.port_clock_attrib.port = $2.name ;
}

<<portset_clock_attirb>>
{
  /* portset_clock_attirb */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_port_clock_attrib ;
  $$->is.port_clock_attrib.pset = $2.name ;
  $$->is.port_clock_attrib.port = $4.name ;
  /* link to symbol table: TBI */
}

<<int_value>>
{
  /* int_value */
  $$ = atoi($1.name) ;
}

<<minus_int_value>>
{
  /* minus_int_value */
  $$ = -atoi($2.name) ;
}


<<portset_info>>
{
  /* portset_info */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_portset_info ;
  $$->is.portset.name = $2.name ;
  $$->is.portset.port_infos = $5 ;
}

<<port_connection_info>>
{
  /* port_connection_info */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_connection_info ;
  $$->is.connection_info.port = $3.name ;
  $$->is.connection_info.path = $5.name ;
}

<<portset_connection_info>>
{
  /* portset_connection_info */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_connection_info ;
  $$->is.connection_info.portset = $3.name ;
  $$->is.connection_info.port = $4.name ;
  $$->is.connection_info.path = $6.name ;
}


#########################################
#   Variable Declaration
#########################################

<<variable_dcl>>
{
  /* variable_dcl */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_variable_dcl ;
  $$->index = $$->is.variable_dcl.index = atoi($2.name) ;
  $$->is.variable_dcl.data_type = $3 ;
  $$->is.variable_dcl.name = $4.name ;
  $$->is.variable_dcl.array_range = $5 ;
  $$->is.variable_dcl.var_attrib = $6 ;
  $$->is.variable_dcl.class = Current_Class ;
}

<<data_type>>
{
  /* data_type */
  $$ = ALLOC(vcode_info) ;
  $$->is.data_type.type = $1 ;
}

<<bit_data_type>>
{
  /* bit_data_type */
  $$ = ALLOC(vcode_info) ;
  $$->is.data_type.type = $1 ;
  $$->is.data_type.ub = atoi($3.name) ;
  $$->is.data_type.lb = atoi($5.name) ;
}

<<named_data_type>>
{
  /* named_data_type */
  $$ = ALLOC(vcode_info) ;
  $$->is.data_type.type = $1 ;
  $$->is.data_type.name = $2.name ;
  /* link to synbol table: TBI */
}

<<array_range>>
{
  /* array_range */
  $$ = ALLOC(vcode_info) ;
  $$->is.array_range.type = $1 ;
}

<<simple_array_range>>
{
  /* array_range */
  $$ = ALLOC(vcode_info) ;
  $$->is.array_range.type = $1 ;
}

<<array_array_range>>
{
  /* array_array_range */
  $$ = ALLOC(vcode_info) ;
  $$->is.array_range.type = $1 ;
  $$->is.array_range.size = atoi($2.name) ;
}

<<marray_array_range>>
{
  /* marray_array_range */
  $$ = ALLOC(vcode_info) ;
  $$->is.array_range.type = $1 ;
  $$->is.array_range.size = atoi($2.name) ;
  $$->is.array_range.range_list = $4 ;
}

<<a_range>>
{
  /* a_range */
  $$ = ALLOC(vcode_info) ;
  $$->is.int_value = atoi($1.name) ;

}

<<range_list>>
{
  /* range_list */
  vcode_info *new, *pre ;
  $$ = $1 ;
  new = ALLOC(vcode_info) ;
  new->is.int_value = atoi($2.name) ;
  pre = $$ ;
  while( pre->next ) pre = pre->next ;
  pre->next = new ;
}

<<null_attrib>>
{
  /* null_attrib */
  $$ = ALLOC(vcode_info) ;
}

<<attrib>>
{
  /* attrib */
  $$ = ALLOC(vcode_info) ;
  switch( $1 ) {
    case VI_static:
      $$->is.attrib.is_static = 1 ;
      break ;
    case VI_clone:
      $$->is.attrib.is_clone = 1 ;
      break ;
    case VI_extern:
      $$->is.attrib.is_extern = 1 ;
      break ;
    case VI_local:
      $$->is.attrib.is_local = 1 ;
      break ;
    case VI_global:
      $$->is.attrib.is_global = 1 ;
      break ;
    case VI_protected:
      $$->is.attrib.is_protected = 1 ;
      break ;
    case VI_final:
      $$->is.attrib.is_final = 1 ;
      break ;
    case VI_abstract:
      $$->is.attrib.is_abstract = 1 ;
      break ;
    case VI_export:
      $$->is.attrib.is_export = 1 ;
      break ;
    case VI_leaf:
      $$->is.attrib.is_leaf = 1 ;
      break ;
    case VI_overwrite:
      $$->is.attrib.is_overwrite = 1 ;
      break ;
  }

}

<<attribs>>
{
  /* var_attribs */
  $$ = $1 ;
  switch( $2 ) {
    case VI_static:
      $$->is.attrib.is_static = 1 ;
      break ;
    case VI_clone:
      $$->is.attrib.is_clone = 1 ;
      break ;
    case VI_extern:
      $$->is.attrib.is_extern = 1 ;
      break ;
    case VI_local:
      $$->is.attrib.is_local = 1 ;
      break ;
    case VI_global:
      $$->is.attrib.is_global = 1 ;
      break ;
    case VI_protected:
      $$->is.attrib.is_protected = 1 ;
      break ;
    case VI_final:
      $$->is.attrib.is_final = 1 ;
      break ;
    case VI_abstract:
      $$->is.attrib.is_abstract = 1 ;
      break ;
    case VI_export:
      $$->is.attrib.is_export = 1 ;
      break ;
    case VI_leaf:
      $$->is.attrib.is_leaf = 1 ;
      break ;
    case VI_overwrite:
      $$->is.attrib.is_overwrite = 1 ;
      break ;
  }

}

#########################################
#   Enum Declaration
#########################################

<<enum_dcl>>
{
  /* enum_dcl */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_enum_dcl ;
  $$->is.enum_dcl.name = $2.name ;
  $$->is.enum_dcl.members = $3 ;
}

<<a_string>>
{
  /* a_string */
  $$ = ALLOC(vcode_info) ;
  $$->is.string = $1.name ;

}

<<string_list>>
{
  /* string_list */
  vcode_info *new, *pre ;
  $$ = $1 ;
  new = ALLOC(vcode_info) ;
  new->is.string = $2.name ;
  pre = $$ ;
  while( pre->next ) pre = pre->next ;
  pre->next = new ;
}

#########################################
#   Function Info
#########################################

<<function_info>>
{
  /* function_info */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_function_info ;
  $$->index = atoi($2.name) ;
  $$->is.function_info.func_options = $3 ;
  $$->is.function_info.data_type = $4 ;
  $$->is.function_info.name = $5.name ;
  $$->is.function_info.sys_flag = $5.sys_flag ;
  $$->srclinenum = atoi($6.name) ;
  $$->srcfilename = $7.name ;
  $$->is.function_info.arguments = $10 ;
  $$->is.function_info.class = Current_Class ;
  
}

<<verilog_task_info>>
{
  /* verilog_task_info */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_veri_task_info ;
  $$->is.function_info.name = $2.name ;
  $$->is.function_info.arguments = $5 ;
  $$->is.function_info.path = $7.name ;
}

<<argument>>
{
  /* argument */
  $$ = ALLOC(vcode_info) ;
  $$->is.argument.var = $1 ;
  $$->is.argument.data_type = $2 ;
  $$->is.argument.name = $3.name ;
  $$->is.argument.array_range = $4 ;
}

<<formal_argument>>
{
  /* formal_argument */
  $$ = NULL ;
}

#########################################
#   Class Info
#########################################

<<class_info_begin>>
{
  /* class_info_begin */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_class_info ;
  $$->is.class.name = $2.name ;
  $$->is.class.sys_flag = $2.sys_flag ;
  $$->is.class.parent = $3 ;
  $$->is.class.attribs = $4 ;
  $$->srclinenum = atoi($5.name) ;
  $$->srcfilename = $6.name ;
  Current_Class = $$ ;
}

<<class_info_end>>
{
  /* class_info_end */
  $$ = Current_Class ;
  Current_Class = NULL ;
  $$->is.class.members = $10 ;
}

<<extention>>
{
  /* extention */
  $$ = $2.name ;
}



#########################################
#   Advice Info
#########################################
<<advice_info>>
{
  /* advice_info */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_advice_info ;
  $$->index = atoi($2.name) ;
  $$->is.function_info.func_options = $3 ;
  $$->is.function_info.data_type = $4 ;
  $$->is.function_info.name = $5.name ;
  $$->srclinenum = atoi($6.name) ;
  $$->srcfilename = $7.name ;
  $$->is.function_info.pointcut = $9 ;
  $$->is.function_info.arguments = $12 ;
  $$->is.function_info.class = Current_Class ;
  
}

#########################################
#   Pointcut Info
#########################################
<<call_pointcut>>
{
  /* call_pointcut */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_call_pointcut ;
  $$->is.pointcut_info.next = $3 ;
}

<<return_pointcut>>
{
  /* return_pointcut */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_return_pointcut ;
  $$->is.pointcut_info.next = $3 ;
}

<<overwrite_pointcut>>
{
  /* call_pointcut */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_overwrite_pointcut ;
  $$->is.pointcut_info.next = $3 ;
}

<<pointcut_chain>>
{
  /* pointcut_chain */
  if( $1 ) {
    vcode_info *a ;
    a = $1 ;
    while( a->is.pointcut_info.next ) 
      a = a->is.pointcut_info.next ;
    a->is.pointcut_info.next = $2 ;
  }
  $$ = $1 ;
}

<<pointcut_name>>
{
  /* pointcut_name */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_pointcut_name ;
  $$->is.pointcut_info.name = $1.name ;

}

<<pointcut_string>>
{
  /* pointcut_name */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_pointcut_string ;
  $$->is.pointcut_info.name = $1.name ;

}

#########################################
#   Aspect Info
#########################################

<<aspect_info_begin>>
{
  /* aspect_info_begin */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_aspect_info ;
  $$->is.class.name = $2.name ;
  $$->srclinenum = atoi($3.name) ;
  $$->srcfilename = $4.name ;
  Current_Class = $$ ;
}

<<aspect_info_end>>
{
  /* aspect_info_end */
  $$ = Current_Class ;
  Current_Class = NULL ;
  $$->is.class.members = $8 ;
}

#########################################
#   Static Variable Declaration
#########################################

<<static_var_dcl>>
{
  /* static_var_dcl */
  JD_name *name, *cls, *var ;
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_static_var_info ;
  $$->is.static_var_dcl.class = $2.name ;
  $$->is.static_var_dcl.func = $3.name ;
  $$->is.static_var_dcl.data_type = $4 ;
  $$->is.static_var_dcl.name = $5.name ;
  $$->is.static_var_dcl.array_range = $6 ;
  $$->is.static_var_dcl.attribs = $7 ;
  
  if( $7 && $7->is.attrib.is_local ) {
    name = find_local_static_name( $2.name, $3.name, $5.name ) ;
    cls = find_local_name( $2.name ) ;
  }
  else {
    name = find_static_name( $2.name, $3.name, $5.name ) ;
    cls = find_global_name( $2.name ) ;
  }
  if( cls ) {
    var = find_name_in_scope( $5.name, cls->child ) ;
  }
  else var = NULL ;
  if( name ) {
    if( name->type != JD_variable_name ) {
      ERROR_VARIABLE_NAME_TYPE_MISMATCH( $$->is.variable_dcl.name ) ;
    }
    else if( !comp_info( name->info, $$ ) ) {
      ERROR_VARIABLE_NAME_ATTRIB_MISMATCH( $$->is.variable_dcl.name ) ;
    }
    $$ = NULL ; 
  }
  else {
    if( $7 && $7->is.attrib.is_local )
      name = add_local_static_name( $2.name, $3.name, $5.name ) ;
    else
      name = add_static_name( $2.name, $3.name, $5.name ) ;
    name->type = JD_variable_name ;
    name->info = $$ ;
    $$->code_name = name ;
    if( var ) var->static_name = name ;
  }
}

#########################################
#   Init Codes
#########################################

<<static_init_code>>
{
  /* static_init_code */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_stat_init_code ;
  $$->is.init_code.code = $3 ;

}

<<init_code>>
{
  /* init_code */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_init_code ;
  $$->is.init_code.code = $3 ;
  
}

<<class_init_code>>
{
  /* class_init_code */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_class_init_code ;
  $$->is.init_code.name = $2.name ;
  $$->is.init_code.code = $4 ;

}

#########################################
#   Class Allocation Code
#########################################

<<class_alloc_code>>
{
  JD_name *cls, *var ;
  vinst_info *code ;
  /* class_alloc_code */
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_class_alloc_code ;
  $$->is.named_code.class = $2.name ;
  $$->is.named_code.code = $4 ;
  
  cls = find_name( $2.name ) ;
  cls->defined = 1 ;
  code = $4 ;
  while( code ) {
    if( code->type == VVI_inst ) {
      if( code->itype == VI_alloc || code->itype == VI_alloc_static ) {
        var = find_name_in_scope( code->name, cls->child ) ;
        if( var->defined ) {
          ERROR_DUPLICATED_DEFINITION_OF_CLASS_MEMBER_VAR( 
            cls->name, var->name 
          ) ;
        }
        var->defined = 1 ;
      }
    }
    code = code->next ;
  }
}

#########################################
#   Member Function Code
#########################################

<<mfunc_code>>
{
  /* mfunc_code */
  JD_name *cls, *func ;
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_mfunc_code ;
  $$->is.named_code.class = $2.name ;
  $$->is.named_code.func = $3.name ;
  $$->is.named_code.code = $5 ;

  cls = find_name( $2.name ) ;
  func = find_name_in_scope( $3.name, cls->child ) ;
  if( func->defined ) {
    ERROR_DUPLICATED_DEFINITION_OF_CLASS_MEMBER_FUNC( cls->name, func->name ) ;
  }
  $$->fname = func ;
  func->defined = 1 ;  
}

#########################################
#   Aspect Member Function Code
#########################################

<<afunc_code>>
{
  /* afunc_code */
  JD_name *cls, *func ;
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_afunc_code ;
  $$->is.named_code.class = $2.name ;
  $$->is.named_code.func = $3.name ;
  $$->is.named_code.code = $5 ;

  cls = find_name( $2.name ) ;
  func = find_name_in_scope( $3.name, cls->child ) ;
  if( func->defined ) {
    ERROR_DUPLICATED_DEFINITION_OF_ASPECT_MEMBER_FUNC( cls->name, func->name ) ;
  }
  $$->fname = func ;
  func->defined = 1 ;  
}

#########################################
#   Aspect Advice Function Code
#########################################

<<advice_code>>
{
  /* advice_code */
  JD_name *cls, *func ;
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_advice_code ;
  $$->is.named_code.class = $2.name ;
  $$->is.named_code.func = $3.name ;
  $$->is.named_code.code = $5 ;

  cls = find_name( $2.name ) ;
  func = find_name_in_scope( $3.name, cls->child ) ;
  if( func->defined ) {
    ERROR_DUPLICATED_DEFINITION_OF_ASPECT_MEMBER_ADVICE(
      cls->name, func->name 
    ) ;
  }
  $$->fname = func ;
  func->defined = 1 ;  
}

#########################################
#   Function Code
#########################################

<<func_code>>
{
  /* func_code */
  JD_name *func ;
  $$ = ALLOC(vcode_info) ;
  $$->type = JD_func_code ;
  $$->is.named_code.func = $2.name ;
  $$->is.named_code.code = $4 ;
  func = find_name( $2.name ) ;
  if( func->defined ) {
    ERROR_DUPLICATED_DEFINITION_OF_FUNC( func->name ) ;
  }
  $$->fname = func ;
  func->defined = 1 ;  
  if( !strcmp($2.name, "main") ) main_defined = 1 ;
}

#############################################################################
#   Virtual-Virtual Instructions
#############################################################################
<<debug_information>>
{
  /* debug_information */
  char *cp, *c ;
  $$ = ALLOC(vinst_info) ;
  $$->type = JD_debug_info ;
  $$->is.debug_info.string = c = cp = $1.name ;
  if( !strncmp( cp, "#statement", 10 ) ) {
    $$->type = JD_debug_statement_info ;
    $$->is.debug_info.string = c ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_info.statementnum = atoi(c) ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) ) c++ ;
    *c = '\0' ;
    $$->is.debug_info.filename = cp ;
    c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_info.linenum = atoi(c) ;
  }
  else if( !strncmp( cp, "#cwd", 4 ) ) {
    $$->type = JD_debug_cwd_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_cwd_info.dir = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) *c = '\0' ;
  }
  else if( !strncmp( cp, "#file", 4 ) ) {
    $$->type = JD_debug_file_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_file_info.file = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) {
      *c = '\0' ;
      c++ ;
      while( isspace(*c) && *c != '\0' ) c++ ;
      if( *c != '\0' ) {
        $$->is.debug_file_info.dir = c ;
        while( !isspace(*c) && ( *c != '\0') ) c++ ;
        if( *c != '\0' ) *c = '\0' ;
      }
      else $$->is.debug_file_info.dir = "" ;
    }
    else {
      $$->is.debug_file_info.dir = "" ;
    }
  }
  else if( !strncmp( cp, "#gen_func_frame", 15 ) ) {
    $$->type = JD_debug_gen_func_frame_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_gen_func_frame_info.func = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) *c = '\0' ;
  }
  else if( !strncmp( cp, "#gen_mfunc_frame", 16 ) ) {
    $$->type = JD_debug_gen_mfunc_frame_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_gen_mfunc_frame_info.mfunc = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) *c = '\0' ;
  }
  else if( !strncmp( cp, "#gen_afunc_frame", 16 ) ) {
    $$->type = JD_debug_gen_afunc_frame_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_gen_mfunc_frame_info.mfunc = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) *c = '\0' ;
  }
  else if( !strncmp( cp, "#gen_advice_frame", 17 ) ) {
    $$->type = JD_debug_gen_advice_frame_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_gen_mfunc_frame_info.mfunc = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) *c = '\0' ;
  }
  else if( !strncmp( cp, "#argument", 9 ) ) {
    $$->type = JD_debug_argument_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) ) c++ ;
    *c = '\0' ;
    $$->is.debug_var_argument_info.name = cp ;
    c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_var_argument_info.level = atoi(c) ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) *c = '\0' ;
    $$->is.debug_var_argument_info.type = cp ;
    c++ ;
    while( isspace(*c) && ( *c != '\0') ) c++ ;
    $$->is.debug_var_argument_info.ub = atoi(c) ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    while( isspace(*c) && ( *c != '\0') ) c++ ;
    $$->is.debug_var_argument_info.lb = atoi(c) ;
  }
  else if( !strncmp( cp, "#variable", 9 ) ) {
    $$->type = JD_debug_variable_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    *c = '\0' ;
    $$->is.debug_var_argument_info.name = cp ;
    c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_var_argument_info.level = atoi(c) ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    if( *c != '\0' ) *c = '\0' ;
    $$->is.debug_var_argument_info.type = cp ;
    c++ ;
    while( isspace(*c) && ( *c != '\0') ) c++ ;
    $$->is.debug_var_argument_info.ub = atoi(c) ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    while( isspace(*c) && ( *c != '\0') ) c++ ;
    $$->is.debug_var_argument_info.lb = atoi(c) ;
  }
  else if( !strncmp( cp, "#enum", 5 ) ) {
    int n ;
    $$->type = JD_debug_enum_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) ) c++ ;
    *c = '\0' ;
    $$->is.debug_enum_info.name = cp ;
    c++ ;
    while( isspace(*c) && (*c != '\n') ) c++ ;
    cp = c ;
    n = 0 ;
    while( (*c != '\n') && (*c != '\0') ) {
      n++ ;
      while( !isspace(*c) ) c++ ;
      while( isspace(*c) && (*c != '\n') && (*c != '\0') ) c++ ;
    }
    $$->is.debug_enum_info.num_member = n ;
    if( n ) {
      int i ;
      $$->is.debug_enum_info.member = 
        (char **)calloc( n, sizeof(char *) ) ;
      c = cp ;
      for( i = 0 ; i < n ; i++ ) {
        cp = c ;
        while( !isspace(*c) && ( *c != '\0') ) c++ ;
        *c = '\0' ; c++ ;
        $$->is.debug_enum_info.member[i] = cp ;
        if( i < n-1 ) while( isspace(*c) ) c++ ;
        cp = c ;
      }
    }
  }
  else if( !strncmp( cp, "#block", 6 ) ) {
    $$->type = JD_debug_block_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_block_info.level = atoi(c) ;
  }
  else if( !strncmp( cp, "#endblock", 9 ) ) {
    $$->type = JD_debug_endblock_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_endblock_info.level = atoi(c) ;
  }
  else if( !strncmp( cp, "#member_variable", 16 ) ) {
    $$->type = JD_debug_member_variable_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) ) c++ ;
    *c = '\0' ;
    $$->is.debug_member_variable_info.class = cp ;
    c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) ) c++ ;
    *c = '\0' ;
    $$->is.debug_member_variable_info.name = cp ;
    c++ ;
    while( isspace(*c) ) c++ ;
    $$->is.debug_member_variable_info.index = atoi(c) ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    while( isspace(*c) && ( *c != '\0') ) c++ ;
    $$->is.debug_member_variable_info.level = atoi(c) ;
  }
  else if( !strncmp( cp, "#aspect_variable", 16 ) ) {
    JD_name *cls, *var ;
    $$->type = JD_debug_aspect_variable_info ;
    while( !isspace(*c) ) c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) ) c++ ;
    *c = '\0' ;
    $$->is.debug_member_variable_info.class = cp ;
    cls = find_local_name( cp ) ;
    if( !cls ) {
      cls = find_global_name( cp ) ;
    }
    c++ ;
    while( isspace(*c) ) c++ ;
    cp = c ;
    while( !isspace(*c) ) c++ ;
    *c = '\0' ;
    $$->is.debug_member_variable_info.name = cp ;
    if( cls ) {
      var = find_name_in_scope( cp, cls->child ) ;
      if( var && var->static_name )
        $$->is.debug_member_variable_info.static_name = var->static_name ;
    }
    c++ ;
    while( isspace(*c) ) c++ ;
    while( !isspace(*c) && ( *c != '\0') ) c++ ;
    while( isspace(*c) && ( *c != '\0') ) c++ ;
    $$->is.debug_member_variable_info.level = atoi(c) ;
  }
}

<<debug_info_vinst>>
{
  /* debug_info_vinst */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_debug_info ;
  $$->vinfo = $1 ;
}

<<vinst_enum_dcl>>
{
  /* vinst_enum_dcl */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_enum_dcl ;
  $$->vinfo = $1 ;
}

<<label>>
{
  /* label */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_label ;
  $$->name = $1.name ;
  if( $1.name[0] == 'f' ) $$->itype = 1 ;
  else $$->itype = 0 ;
}

<<new_obj>>
{
  /* new_obj */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;
  $$->name = $2.name ;
}

<<var_aloc>>
{
  /* var_aloc */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;
  $$->index = atoi($2.name) ;
  $$->data_type = $3 ;
  $$->name = $4.name ;
  $$->array_range = $5 ;
  $$->opt_flags = $6 ; 
}

<<alloc_static>>
{
  /* alloc_static */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;
  $$->class = $2.name ;
  $$->func = $3.name ;
  $$->data_type = $5 ;
  $$->name = $6.name ;
  $$->array_range = $7 ;
  $$->opt_flags = $8 ; 
  name = find_local_static_name( $2.name, $3.name, $6.name ) ;
  if( !name ) name = find_static_name( $2.name, $3.name, $6.name ) ;
  if( !name ) {
    int len ;
    char *full_name ;
    len = strlen($2.name)+strlen($3.name)+strlen($6.name)+5 ;
    full_name = (char *)calloc( len, sizeof(char) ) ;
    strcat( full_name, $2.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $3.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $6.name ) ;
    ERROR_VARIABLE_NAME_NOT_FOUND( full_name ) ;  
    exit(1) ;
  }
  $$->code_name = name ;
}

<<static_var_aloc>>
{
  /* var_aloc */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $2 ; /* use 'static' as itype */
  $$->data_type = $4 ;
  $$->class = $5.name ;
  $$->func = $6.name ;
  $$->name = $7.name ;
  $$->array_range = $8 ;
  $$->opt_flags = $9 ; 
  name = find_local_static_name( $5.name, $6.name, $7.name ) ;
  if( !name ) name = find_static_name( $5.name, $6.name, $7.name ) ;
  if( !name ) {
    int len ;
    char *full_name ;
    len = strlen($5.name)+strlen($6.name)+strlen($7.name)+5 ;
    full_name = (char *)calloc( len, sizeof(char) ) ;
    strcat( full_name, $5.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $6.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $7.name ) ;
    ERROR_VARIABLE_NAME_NOT_FOUND( full_name ) ;  
    exit(1) ;
  }
  $$->code_name = name ;
}

<<simple>>
{
  /* simple */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
}

<<new_obj>>
{
  /* new_obj */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ; 
  $$->name = $2.name ;
}

<<arg_alloc>>
{
  /*  */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->is_var = $1 ;
  $$->itype = $2 ;  
  $$->index = atoi($3.name) ;
  $$->offset = atoi($4.name) ;
  $$->data_type = $5 ;
  $$->name = $6.name ;
  $$->array_range = $7 ;
  $$->opt_flags = $8 ; 
  
}

<<convert_bit>>
{
  /* convert_bit */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->ub = atoi($3.name) ;
  $$->lb = atoi($4.name) ;
  $$->sd_type = $5 ;
}

<<convert>>
{
  /* convert */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->sd_type = $3 ;
  
}

<<aluops>>
{
  /* aluops */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->sd_type = $2 ;
}

<<load_const>>
{
  /* load_const */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->sd_type = $2 ;
  $$->const_data = $3 ;
}

<<op_optvar>>
{
  /* op_optvar */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->is_var = $2 ;
}

<<op_label>>
{
  /* op_label */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->name = $2.name ;
}

<<op_type_label>>
{
  /* op_label */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->sd_type = $2 ;
  $$->name = $3.name ;
}

<<op_optvar_index>>
{
  /* op_optvar_index */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->is_var = $2 ;
  $$->index = atoi($3.name) ;
}

<<aluops_index>>
{
  /*  */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->sd_type = $2 ;
  $$->index = atoi($3.name) ;
  
}

<<op_subbit>>
{
  /*  */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->bit_type = $2 ;
}

<<op_index>>
{
  /* op_index */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ; 
  $$->index = atoi($2.name) ; 
  
}

<<op_subop>>
{
  /* op_subop */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
}

<<op_subop_index>>
{
  /* op_subop_index */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->index = atoi($3.name) ; 
}

<<call>>
{
  /* call */
  JD_name *func ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->func = $2.name ;
  $$->index = atoi($3.name) ;
  func = find_name( $2.name ) ;
  if( func == NULL || 
      ( func->type != JD_func_name && func->type != JD_mfunc_name && 
        func->type != JD_sys_func_name && func->type != JD_sys_mfunc_name ) 
    ) 
  {
    ERROR_FUNC_NAME_NOT_FOUND( $2.name ) ;
  }
  $$->fname = func ;
  $$->func_type = func->type ;  
}

<<call_m>>
{
  /* call_m */
  JD_name *cls, *func ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->class = $2.name ;
  $$->func = $3.name ;
  $$->index = atoi($4.name) ;
  cls = find_name( $2.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $2.name ) ;
  }
  else {
    func = find_name_in_scope( $3.name, cls->child ) ;
    if( func == NULL && !strcmp( $3.name, "new" ) ) {
      $$->type = VVI_dummy_new ;
    }
    else {
      if( func == NULL || 
          ( func->type != JD_func_name && func->type != JD_mfunc_name && 
          func->type != JD_sys_func_name && func->type != JD_sys_mfunc_name ) 
        ) 
      {
        ERROR_MEMBER_FUNCTION_NOT_FOUND( $2.name, $3.name ) ;
      }
      $$->fname = func ;
      $$->func_type = func->type ;
    } 
  } 
}

<<call_a>>
{
  /* call_a */
  JD_name *cls, *func ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->class = $2.name ;
  $$->func = $3.name ;
  $$->index = atoi($4.name) ;
  cls = find_name( $2.name ) ;
  if( cls == NULL )
  {
    ERROR_ASPECT_NAME_NOT_FOUND( $2.name ) ;
  }
  else {
    func = find_name_in_scope( $3.name, cls->child ) ;
    if( func == NULL || 
        ( func->type != JD_func_name && func->type != JD_mfunc_name && 
        func->type != JD_sys_func_name && func->type != JD_sys_mfunc_name ) 
      ) 
    {
      ERROR_MEMBER_FUNCTION_NOT_FOUND( $2.name, $3.name ) ;
    }
    $$->fname = func ;
    $$->func_type = func->type ;
  }
}




<<breakpoint>>
{
  /* breakpoint */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;
  $$->name = $2.name ;
  
}

<<veri_call>>
{
  /* call */
  JD_name *func ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->func = $2.name ;
  $$->index = atoi($3.name) ;
  func = find_verilog_name( $2.name ) ;
  if( func == NULL || func->type != JD_verilog_task_name  ) 
  {
    ERROR_VERILOG_TASK_NAME_NOT_FOUND( $2.name ) ;
  }
  $$->is_leaf = 1 ;
  $$->func_type = func->type ;  
}

<<sync_pset>>
{
  /* sync_pset */
  JD_name *pset, *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->edge = $3 ;
  $$->portset = $4.name ;
  $$->port = $5.name ;
  pset = find_global_name( $4.name ) ;
  if( !pset ) {
    ERROR_PORT_SET_NAME_NOT_FOUND( $4.name ) ;
  }
  name = find_name_in_scope( $5.name, pset->child ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND_IN_PORT_SET( $4.name, $5.name ) ;
  }
  $$->code_name = name ;
}

<<sync_port>>
{
  /* sync_port */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->edge = $3 ;
  $$->port = $4.name ;
  name = find_global_name( $4.name ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND( $4.name ) ;
  }
  $$->code_name = name ;
}

<<sync_sig>>
{
  /* sync_sig */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->edge = $3 ;
}

<<sync_member>>
{
  /* sync_member */
  JD_name *cls, *vr ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->edge = $3 ;
  $$->class = $4.name ;
  $$->name = $5.name ;
  cls = find_name( $4.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $4.name ) ;
  }
  vr = find_name_in_scope( $5.name, cls->child ) ; ;
  if( vr == NULL || vr->type != JD_variable_name ) {
    ERROR_MEMBER_NAME_NOT_FOUND( $4.name, $5.name ) ;
  }
  $$->index = vr->info->is.variable_dcl.index ;
}

<<sync_l>>
{
  /* sync_l */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->edge = $3 ;
  $$->index = atoi($4.name) ;
  
}

<<sync_g>>
{
  /* sync_g */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->edge = $3 ;
  $$->name = $4.name ;
  name = find_local_name( $4.name ) ;
  if( !name ) {
    name = find_global_name( $4.name ) ;
  }
  if( !name ) {
    ERROR_VARIABLE_NAME_NOT_FOUND( $4.name ) ;
  }
  $$->code_name = name ;
}

<<loadl>>
{
  /* loadl */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->is_var = $4 ;
  $$->index = atoi($5.name) ;
}

<<loadg>>
{
  /* loadg */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_var = $3 ;
  $$->name = $4.name ;
  name = find_local_name( $4.name ) ;
  if( !name ) {
    name = find_global_name( $4.name ) ;
  }
  if( !name ) {
    ERROR_VARIABLE_NAME_NOT_FOUND( $4.name ) ;
  }
  $$->code_name = name ;
}

<<loadm>>
{
  /* loadm */
  JD_name *cls, *vr ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->is_var = $4 ;
  $$->class = $5.name ;
  $$->name = $6.name ;
  cls = find_name( $5.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $5.name ) ;
  }
  vr = find_name_in_scope( $6.name, cls->child ) ; 
  if( vr == NULL || vr->type != JD_variable_name ) {
    ERROR_MEMBER_NAME_NOT_FOUND( $5.name, $6.name ) ;
    exit(1) ;
  }
  $$->index = vr->info->is.variable_dcl.index ;
}

<<load_port>>
{
  /* op_port */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->port = $2.name ;
  name = find_global_name( $2.name ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND( $2.name ) ;
  }
  $$->code_name = name ;
}


<<load_pset>>
{
  /* op_pset */
  JD_name *pset, *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->portset = $2.name ;
  $$->port = $3.name ;
  pset = find_global_name( $2.name ) ;
  if( !pset ) {
    ERROR_PORT_SET_NAME_NOT_FOUND( $2.name ) ;
  }
  name = find_name_in_scope( $3.name, pset->child ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND_IN_PORT_SET( $2.name, $3.name ) ;
  }
  $$->code_name = name ;
}

<<load_port_sub>>
{
  /* load_port_sub */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->port = $3.name ;
  name = find_global_name( $3.name ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND( $3.name ) ;
  }
  $$->code_name = name ;
}


<<load_pset_sub>>
{
  /* op_pset_sub */
  JD_name *pset, *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;
  $$->portset = $3.name ;
  $$->port = $4.name ;
  pset = find_global_name( $3.name ) ;
  if( !pset ) {
    ERROR_PORT_SET_NAME_NOT_FOUND( $3.name ) ;
  }
  name = find_name_in_scope( $4.name, pset->child ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND_IN_PORT_SET( $3.name, $4.name ) ;
  }
  $$->code_name = name ;
}

<<op_static>>
{
  /* op_static */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->is_static = $2 ;
}

<<load_static>>
{
  /* load_static */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->class = $3.name ;
  $$->func = $4.name ;
  $$->name = $5.name ;
  name = find_local_static_name( $3.name, $4.name, $5.name ) ;
  if( !name ) name = find_static_name( $3.name, $4.name, $5.name ) ;
  if( !name ) {
    int len ;
    char *full_name ;
    len = strlen($3.name)+strlen($4.name)+strlen($5.name)+5 ;
    full_name = (char *)calloc( len, sizeof(char) ) ;
    strcat( full_name, $3.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $4.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $5.name ) ;
    ERROR_VARIABLE_NAME_NOT_FOUND( full_name ) ;  
    exit(1) ;
  }
  $$->code_name = name ;
}

<<storel>>
{
  /* storel */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->sd_type = $4 ;
  $$->index = atoi($5.name) ;
}

<<storeg>>
{
  /* storeg */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->sd_type = $4 ;
  $$->name = $5.name ;
  name = find_local_name( $5.name ) ;
  if( !name ) {
    name = find_global_name( $5.name ) ;
  }
  if( !name ) {
    ERROR_VARIABLE_NAME_NOT_FOUND( $5.name ) ;
  }
  $$->code_name = name ;
}

<<storem>>
{
  /* storem */
  JD_name *cls, *vr ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->sd_type = $4 ;
  $$->class = $5.name ;
  $$->name = $6.name ;
  cls = find_name( $5.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $5.name ) ;
  }
  vr = find_name_in_scope( $6.name, cls->child ) ; ;
  if( vr == NULL || vr->type != JD_variable_name ) {
    ERROR_MEMBER_NAME_NOT_FOUND( $5.name, $6.name ) ;
  }
  $$->index = vr->info->is.variable_dcl.index ;
}

<<storel_sub>>
{
  /* storel_sub */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->isubtype = $4 ;
  $$->bit_type = $5 ;
  $$->sd_type = $6 ;
  $$->index = atoi($7.name) ;
}

<<storeg_sub>>
{
  /* storeg_sub */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->isubtype = $4 ;
  $$->bit_type = $5 ;
  $$->sd_type = $6 ;
  $$->name = $7.name ;
  name = find_local_name( $7.name ) ;
  if( !name ) {
    name = find_global_name( $7.name ) ;
  }
  if( !name ) {
    ERROR_VARIABLE_NAME_NOT_FOUND( $7.name ) ;
  }
  $$->code_name = name ;
}

<<storem_sub>>
{
  /* storem_sub */
  JD_name *cls, *vr ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->isubtype = $4 ;
  $$->bit_type = $5 ;
  $$->sd_type = $6 ;
  $$->class = $7.name ;
  $$->name = $8.name ;
  cls = find_name( $7.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $7.name ) ;
  }
  vr = find_name_in_scope( $8.name, cls->child ) ; ;
  if( vr == NULL || vr->type != JD_variable_name ) {
    ERROR_MEMBER_NAME_NOT_FOUND( $7.name, $8.name ) ;
    exit(1) ;
  }
  $$->index = vr->info->is.variable_dcl.index ;
}

<<store_port>>
{
  /* store_port */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->sd_type = $2 ;
  $$->strength = $3 ;
  $$->port = $4.name ;
  name = find_global_name( $4.name ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND( $4.name ) ;
  }
  $$->code_name = name ;
}

<<store_pset>>
{
  /* store_pset */
  JD_name *pset, *port ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->sd_type = $2 ;
  $$->strength = $3 ;
  $$->portset = $4.name ;
  $$->port = $5.name ;
  pset = find_global_name( $4.name ) ;
  if( !pset ) {
    ERROR_PORT_SET_NAME_NOT_FOUND( $4.name ) ;
  }
  port = find_name_in_scope( $5.name, pset->child ) ; 
  if( !port ) {
    ERROR_PORT_NAME_NOT_FOUND_IN_PORT_SET( $4.name, $5.name ) ;
  }
  $$->code_name = port ;
}

<<store_sig_l>>
{
  /* store_sig_l */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->sd_type = $4 ;
  $$->strength = $5 ;
  $$->index = atoi($6.name) ;  
}

<<store_sig_g>>
{
  /* store_sig_g */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->sd_type = $4 ;
  $$->strength = $5 ;
  $$->name = $6.name ;
  name = find_local_name( $6.name ) ;
  if( !name ) {
    name = find_global_name( $6.name ) ;
  }
  if( !name ) {
    ERROR_VARIABLE_NAME_NOT_FOUND( $6.name ) ;
  }
  $$->code_name = name ;
}

<<store_sig_m>>
{
  /* store_sig_m */
  JD_name *cls, *vr ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->sd_type = $4 ;
  $$->strength = $5 ;
  $$->class = $6.name ;
  $$->name = $7.name ;
  cls = find_name( $6.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $6.name ) ;
  }
  vr = find_name_in_scope( $7.name, cls->child ) ; ;
  if( vr == NULL || vr->type != JD_variable_name ) {
    ERROR_MEMBER_NAME_NOT_FOUND( $6.name, $7.name ) ;
  }
  $$->index = vr->info->is.variable_dcl.index ;
}

<<store_port_sub>>
{
  /* store_port_sub */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;  
  $$->bit_type = $3 ;
  $$->sd_type = $4 ;
  $$->strength = $5 ;
  $$->port = $6.name ;
  name = find_global_name( $6.name ) ;
  if( !name ) {
    ERROR_PORT_NAME_NOT_FOUND( $6.name ) ;
  }
  $$->code_name = name ;
}

<<store_pset_sub>>
{
  /* store_pset_sub */
  JD_name *pset, *port ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->isubtype = $2 ;  
  $$->bit_type = $3 ;
  $$->sd_type = $4 ;
  $$->strength = $5 ;
  $$->portset = $6.name ;
  $$->port = $7.name ;
  pset = find_global_name( $6.name ) ;
  if( !pset ) {
    ERROR_PORT_SET_NAME_NOT_FOUND( $6.name ) ;
  }
  port = find_name_in_scope( $7.name, pset->child ) ; 
  if( !port ) {
    ERROR_PORT_NAME_NOT_FOUND_IN_PORT_SET( $7.name, $6.name ) ;
  }
  $$->code_name = port ;
}


<<store_sig_l_sub>>
{
  /* store_sig_l_sub */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->isubtype = $4 ;
  $$->bit_type = $5 ;
  $$->sd_type = $6 ;
  $$->strength = $7 ;
  $$->index = atoi($8.name) ;  
}


<<store_sig_g_sub>>
{
  /* store_sig_g_sub */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->isubtype = $4 ;
  $$->bit_type = $5 ;
  $$->sd_type = $6 ;
  $$->strength = $7 ;
  $$->name = $8.name ;  
  name = find_local_name( $8.name ) ;
  if( !name ) {
    name = find_global_name( $8.name ) ;
  }
  if( !name ) {
    ERROR_VARIABLE_NAME_NOT_FOUND( $8.name ) ;
  }
  $$->code_name = name ;
}

<<store_sig_m_sub>>
{
  /* store_sig_m_sub */
  JD_name *cls, *vr ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->is_static = $3 ;
  $$->isubtype = $4 ;
  $$->bit_type = $5 ;
  $$->sd_type = $6 ;
  $$->strength = $7 ;
  $$->class = $8.name ;  
  $$->name = $9.name ;  
  cls = find_name( $8.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $8.name ) ;
  }
  vr = find_name_in_scope( $9.name, cls->child ) ; ;
  if( vr == NULL || vr->type != JD_variable_name ) {
    ERROR_MEMBER_NAME_NOT_FOUND( $8.name, $9.name ) ;
  }
  $$->index = vr->info->is.variable_dcl.index ;
}

<<store_static>>
{
  /* store_static */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->sd_type = $3 ;
  $$->class = $4.name ;
  $$->func = $5.name ;
  $$->name = $6.name ;
  name = find_local_static_name( $4.name, $5.name, $6.name ) ;
  if( !name ) name = find_static_name( $4.name, $5.name, $6.name ) ;
  if( !name ) {
    int len ;
    char *full_name ;
    len = strlen($4.name)+strlen($5.name)+strlen($6.name)+5 ;
    full_name = (char *)calloc( len, sizeof(char) ) ;
    strcat( full_name, $4.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $5.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $6.name ) ;
    ERROR_VARIABLE_NAME_NOT_FOUND( full_name ) ;  
    exit(1) ;
  }
  $$->code_name = name ;
}

<<store_sig_static>>
{
  /* store_sig_static */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->sd_type = $3 ;
  $$->strength = $4 ;
  $$->class = $5.name ;
  $$->func = $6.name ;
  $$->name = $7.name ;
  name = find_local_static_name( $5.name, $6.name, $7.name ) ;
  if( !name ) name = find_static_name( $5.name, $6.name, $7.name ) ;
  if( !name ) {
    int len ;
    char *full_name ;
    len = strlen($5.name)+strlen($6.name)+strlen($7.name)+5 ;
    full_name = (char *)calloc( len, sizeof(char) ) ;
    strcat( full_name, $5.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $6.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $7.name ) ;
    ERROR_VARIABLE_NAME_NOT_FOUND( full_name ) ;  
    exit(1) ;
  }
  $$->code_name = name ;
}

<<store_static_sub>>
{
  /* store_static_sub */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->isubtype = $3 ;
  $$->bit_type = $4 ;
  $$->sd_type = $5 ;
  $$->class = $6.name ;
  $$->func = $7.name ;
  $$->name = $8.name ;
  name = find_local_static_name( $6.name, $7.name, $8.name ) ;
  if( !name ) name = find_static_name( $6.name, $7.name, $8.name ) ;
  if( !name ) {
    int len ;
    char *full_name ;
    len = strlen($6.name)+strlen($7.name)+strlen($8.name)+5 ;
    full_name = (char *)calloc( len, sizeof(char) ) ;
    strcat( full_name, $6.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $7.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $8.name ) ;
    ERROR_VARIABLE_NAME_NOT_FOUND( full_name ) ;  
    exit(1) ;
  }
  $$->code_name = name ;
}

<<store_sig_static_sub>>
{
  /* store_sig_static */
  JD_name *name ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->array_access = $2 ;
  $$->isubtype = $3 ;
  $$->bit_type = $4 ;
  $$->sd_type = $5 ;
  $$->strength = $6 ;
  $$->class = $7.name ;
  $$->func = $8.name ;
  $$->name = $9.name ;
  name = find_local_static_name( $7.name, $8.name, $9.name ) ;
  if( !name ) name = find_static_name( $7.name, $8.name, $9.name ) ;
  if( !name ) {
    int len ;
    char *full_name ;
    len = strlen($7.name)+strlen($8.name)+strlen($9.name)+5 ;
    full_name = (char *)calloc( len, sizeof(char) ) ;
    strcat( full_name, $7.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $8.name ) ;
    strcat( full_name, "." ) ;
    strcat( full_name, $9.name ) ;
    ERROR_VARIABLE_NAME_NOT_FOUND( full_name ) ;  
    exit(1) ;
  }
  $$->code_name = name ;
}

<<store_obj>>
{
  /* store_obj */
  JD_name *cls, *vr ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->sd_type = $2 ;
  $$->class = $3.name ;
  $$->name = $4.name ;
  cls = find_name( $3.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $3.name ) ;
  }
  vr = find_name_in_scope( $4.name, cls->child ) ; ;
  if( vr == NULL || vr->type != JD_variable_name ) {
    ERROR_MEMBER_NAME_NOT_FOUND( $3.name, $4.name ) ;
  }
  $$->index = vr->info->is.variable_dcl.index ;
}


<<alloc_func>>
{
  /* alloc_func */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;
  $$->index = atoi($2.name) ;
  $$->name = $3.name ;
}

<<overwrite>>
{
  /* overwrite */
  JD_name *cls, *func ;
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->parent = $2.name ;
  $$->class = $3.name ;
  $$->func = $$->name = $4.name ;
  cls = find_name( $2.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $2.name ) ;
  }
  func = find_name_in_scope( $4.name, cls->child ) ; ;
  if( func == NULL || func->type != JD_mfunc_name ) {
    ERROR_MEMBER_FUNCTION_NOT_FOUND( $2.name, $4.name ) ;
  }
  $$->index = func->info->index ;
  if( func->info->index < 0 ) {
    ERROR_ILLEGAL_OVERWRITE_INDEX_FOR_MEMBER_FUNCTION( $2.name, $4.name ) ;
  }
  cls = find_name( $3.name ) ;
  if( cls == NULL )
  {
    ERROR_CLASS_NAME_NOT_FOUND( $3.name ) ;
  }
  func = find_name_in_scope( $4.name, cls->child ) ; ;
  if( func == NULL || func->type != JD_mfunc_name ) {
    ERROR_MEMBER_FUNCTION_NOT_FOUND( $3.name, $4.name ) ;
  }
}

<<chk_overwrite>>
{
  /* overwrite */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->index = atoi($2.name) ;
  $$->func = $$->name = $3.name ;
}

<<advice_op>>
{
  /* advice_op */
  $$ = ALLOC(vinst_info) ;
  $$->type = VVI_inst ;
  $$->inum = inst_num++ ;
  $$->itype = $1 ;  
  $$->fname = $2 ;
}

<<pointcut_spec>>
{
  /* pointcut_spec */
  $$ = ALLOC(JD_name) ;
  $$->name = $1.name ;
  $$->class_name = $2 ;
}


<<class_pointcut>>
{
  /* class_pointcut */
  $$ = ALLOC(JD_name) ;
  $$->name = $2.name ;
}


#########################################
#   options for vinst_info
#########################################

<<stype>>
{
  /* stype */
  $$ = ALLOC(vcode_info) ;
  $$->is.sd_type.a = $2 ;
}

<<dtype>>
{
  /* dtype */
  $$ = ALLOC(vcode_info) ;
  $$->is.sd_type.a = $2 ;
  $$->is.sd_type.b = $4 ;
}

<<ttype>>
{
  /* dtype */
  $$ = ALLOC(vcode_info) ;
  $$->is.sd_type.a = $2 ;
  $$->is.sd_type.b = $4 ;
  $$->is.sd_type.c = $6 ;
}

<<static_flag>>
{
  /* static_flag */
  $$ = ALLOC(vcode_info) ;
  $$->is.attrib.is_static = 1 ;
}

<<clone_flag>>
{
  /* clone_flag */
  $$ = ALLOC(vcode_info) ;
  $$->is.attrib.is_clone = 1 ;
}

<<static_clone_flag>>
{
  /* static_clone_flag */
  $$ = ALLOC(vcode_info) ;
  $$->is.attrib.is_static = 1 ;
  $$->is.attrib.is_clone = 1 ;
}

<<bit_type>>
{
  /* static_clone_flag */
  $$ = ALLOC(vcode_info) ;
  $$->is.bit_type.type = $1 ;
  $$->is.bit_type.ub = atoi($3.name) ;
  $$->is.bit_type.lb = atoi($5.name) ;
}

#########################################
#   constant scan
#########################################

<<string_const>>
{
  /* string_const */
  $$ = ALLOC(expression_node) ;
  $$->type = JD_string_lit ;
  $$->is.string = $1.name ;  
}

<<enum_const>>
{
  /* string_const */
  $$ = ALLOC(expression_node) ;
  $$->type = JD_enum_member ;
  $$->is.enum_const.type = $1.name ;  
  $$->is.enum_const.member = $2.name ;
  $$->is.enum_const.index = atoi($3.name) ;
}

<<real_num>>
{
  /* real_num */
  $$ = ALLOC(expression_node) ;
  $$->type = JD_real_num ;
  $$->is.real_value = atof($1.name) ;  
  $$->string = $1.name ;
}

<<decimal_num>>
{
  /* decimal_num */
  $$ = ALLOC(expression_node) ;
  $$->type = JD_int_const ;
  $$->is.int_value = atoi($1.name) ;  
  $$->string = $1.name ;
}

<<v_decimal_num>>
{
  /* v_decimal_num */
  $$ = ALLOC(expression_node) ;
  scan_v_decimal( $1.name, $$ ) ;
  $$->string = $1.name ;
}

<<c_decimal_num>>
{
  /* c_decimal_num */
  $$ = ALLOC(expression_node) ;
  scan_c_decimal( $1.name, $$ ) ;
  $$->string = $1.name ;
}

<<v_hex_num>>
{
  /* v_hex_num */
  $$ = ALLOC(expression_node) ;
  scan_v_hex( $1.name, $$ ) ;
  $$->string = $1.name ;
}

<<c_hex_num>>
{
  /* c_hex_num */
  $$ = ALLOC(expression_node) ;
  scan_c_hex( $1.name, $$ ) ;
  $$->string = $1.name ;
}

<<v_octal_num>>
{
  /* v_octal_num */
  $$ = ALLOC(expression_node) ;
  scan_v_octal( $1.name, $$ ) ;
  $$->string = $1.name ;
}

<<c_octal_num>>
{
  /* c_octal_num */
  $$ = ALLOC(expression_node) ;
  scan_c_octal( $1.name, $$ ) ;
  $$->string = $1.name ;
}

<<v_bin_num>>
{
  /* v_bin_num */
  $$ = ALLOC(expression_node) ;
  scan_v_binary( $1.name, $$ ) ;
  $$->string = $1.name ;
}

<<c_bin_num>>
{
  /* c_bin_num */
  $$ = ALLOC(expression_node) ;
  scan_c_binary( $1.name, $$ ) ;
  $$->string = $1.name ;
}
