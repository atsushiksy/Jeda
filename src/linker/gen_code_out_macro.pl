#! /usr/bin/perl
#
#   perl gen_code_out_macro.pl < ../runtime/exec_int_alu_ops.c > ../include/exec_int_alu_macro.h
#   perl gen_code_out_macro.pl < ../runtime/exec_b_i_alu_ops.c > ../include/exec_b_i_alu_macro.h
#   perl gen_code_out_macro.pl < ../runtime/exec_float_alu_ops.c > ../include/exec_float_alu_macro.h
#   perl gen_code_out_macro.pl < ../runtime/code_exec.c > ../include/code_exec.h
#
# 
#  
#  Copyright (C) 1999, 2000, 2001 Juniper Networks Inc.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.  
#   
#

print "/********************************************/\n" ;
print "/* macro generated by gen_code_out_macro.pl */\n" ;
print "/********************************************/\n" ;
while( <> ) {
  if( /^\s*void\s+(\w+)\(/ ) {
    $func_name = $1 ;
  }
  if( /MACRO\s+(\w+)\((\w+)\)/ ) {
    $macro_name = $1 ;
    $arg = $2 ;
    print "#define CALL_$macro_name  $func_name($arg)\n" ;
    #print stderr "Got macro $macro_name\n" ;
    print "#define OUT_$macro_name($arg) \\\n" ;
    if( $func_name ne "" ) {
      print "  if( inline_optimization ) {  \\\n" ;
    }
    $line = <> ;
    chop $line ;
    while( !($line =~ /END MACRO/ ) ) {
      print "    OUT0( \"$line\\n\" ) ;\\\n" ;
      $line = <> ;
      chop $line ;
    }
    if( $func_name ne "" ) {
      print "  } \\\n" ;
      print "else { \\\n" ;
      print "    OUT0( \"  $func_name($arg) ; \\n\" ) ; \\\n" ;
      print "  }\n" ;
    }
    else {
      print "  \n" ;
    }
    $func_name = "" ;
  }
  elsif( /MACRO\s+(\w+)/ ) {
    $macro_name = $1 ;
    print "#define CALL_$macro_name  $func_name()\n" ;
    #print stderr "Got macro $macro_name\n" ;
    print "#define OUT_$macro_name \\\n" ;
    if( $func_name ne "" ) {
      print "  if( inline_optimization ) {  \\\n" ;
    }
    $line = <> ;
    chop $line ;
    while( !($line =~ /END MACRO/ ) ) {
      print "    OUT0( \"$line\\n\" ) ;\\\n" ;
      $line = <> ;
      chop $line ;
    }
    if( $func_name ne "" ) {
      print "  } \\\n" ;
      print "else { \\\n" ;
      print "    OUT0( \"  $func_name() ; \\n\" ) ; \\\n" ;
      print "  }\n" ;
    }
    else {
      print "  \n" ;
    }
    $func_name = "" ;
  }
}
