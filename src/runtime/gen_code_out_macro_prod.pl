#! /usr/bin/perl
#
#   perl gen_code_out_macro_prod.pl < ../runtime/exec_int_alu_ops.c > ../include/exec_int_alu_macro.h
#   perl gen_code_out_macro_prod.pl < ../runtime/exec_b_i_alu_ops.c > ../include/exec_b_i_alu_macro.h
#   perl gen_code_out_macro_prod.pl < ../runtime/exec_float_alu_ops.c > ../include/exec_float_alu_macro.h
#   perl gen_code_out_macro_prod.pl < ../runtime/code_exec.c > ../include/code_exec.h
#
#  
#  Copyright (C) 1999, 2000, 2001 Juniper Networks Inc.
#  Copyright (C) 2002, 2003 Jeda Technologies, Inc.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.  
#   

@inline = (
 'JD_flush_vstack', 
 'JD_exec_alloc_func', 
 'JD_exec_concat_bit_int', 
 'JD_exec_copy_arg_single_bit', 
 'JD_exec_copy_arg_single_int', 
 'JD_exec_copy_arg_single_obj', 
 'JD_exec_gen_m_frame', 
 'JD_exec_get_subbit', 
 'JD_exec_int_to_bit', 
 'JD_exec_loadl_single', 
 'JD_exec_loadm_single', 
 'JD_exec_lvar_single_bit', 
 'JD_exec_lvar_single_int', 
 'JD_exec_lvar_single_obj', 
 'JD_exec_pop_n', 
 'JD_exec_pop_this', 
 'JD_exec_store_sig_m', 
 'JD_exec_storel_single_bit', 
 'JD_exec_storel_single_int', 
 'JD_exec_storel_single_obj', 
 'JD_exec_sync_clk_of_signal', 
 'JD_exec_sync_signal', 
 'JD_pop_acc', 
 'JD_push_acc'
) ;

@codeinline = (
 'JD_exec_alloc_func', 
 'JD_exec_copy_arg_single_int', 
 'JD_exec_copy_arg_single_obj', 
 'JD_exec_gen_m_frame', 
 'JD_exec_int_to_bit', 
 'JD_exec_loadl_single', 
 'JD_exec_loadm_single', 
 'JD_exec_lvar_single_bit', 
 'JD_exec_lvar_single_int', 
 'JD_exec_lvar_single_obj', 
 'JD_exec_pop_n', 
 'JD_exec_pop_this', 
 'JD_exec_storel_single_int', 
 'JD_exec_storel_single_obj'
) ;

@codeinline1 = (
 'JD_flush_vstack', 
 'JD_exec_concat_bit_int', 
 'JD_exec_loadg_single', 
 'JD_exec_sync_clk_of_signal',
 'JD_exec_sync_signal',
 'JD_exec_store_sig_m'
) ;

foreach (@inline) {
  $indef{$_} = 1 ;
  #printf "$_ $indef{$_}\n" ;
}

foreach (@codeinline) {
  $codeindef{$_} = 1 ;
  #printf "$_ $indef{$_}\n" ;
}

foreach (@codeinline1) {
  $codeindef1{$_} = 1 ;
  #printf "$_ $indef{$_}\n" ;
}

print "/********************************************/\n" ;
print "/* macro generated by gen_code_out_macro_prod.pl */\n" ;
print "/********************************************/\n" ;
while( <> ) {
  if( /^\s*void\s+(\w+)\(/ ) {
    $func_name = $1 ;
  }
  if( /MACRO\s+(\w+)/ ) {
    $macro_name = $1 ;
    $R = $' ;
    if( $R =~ /^(\(\S+\))/ ) {
      $arg = $1 ;
      $carg = $1 ;
    }
    else {
      $arg = "" ;
      $carg = "()" ;
    }
    #print stderr "Got macro $macro_name\n" ;
    $line = <> ;
    chop $line ;
    $n = 0 ;
    while( !($line =~ /END MACRO/ ) ) {
      $lbuf[$n++] = $line ;
      $line = <> ;
      chop $line ;
    }
    if( $indef{$func_name} ) {
      print "#ifdef JEDA_INLINE_OPTIMIZATION\n" ;
    
      print "#  define CALL_$macro_name$arg  { \\\n" ;
      for( $i = 0 ; $i < $n ; $i++ ) {
        $line = $lbuf[$i] ;
        print " $line\\\n" ;
      }
      print "  }\n" ;
      print "#else\n" ;
      print "#  define CALL_$macro_name$arg  $func_name$carg\n" ;
      print "#endif\n" ;
    }
    else {
      print "#  define CALL_$macro_name$arg  $func_name$carg\n" ;
    }
    print "#define OUT_$macro_name$arg \\\n" ;
    if( $codeindef{$func_name} ) {
      print "  if( inline_optimization ) {  \\\n" ;
      print "    OUT0( \"    /* Macro for $func_name */ \\n\" ) ; \\\n" ;
      for( $i = 0 ; $i < $n ; $i++ ) {
        $line = $lbuf[$i] ;
        print "    OUT0( \"$line\\n\" ) ;\\\n" ;
      }
      print "  } \\\n" ;
      print "  else { \\\n" ;
      print "    OUT0( \"$func_name$carg ;\\n\" ) ; \\\n" ;
      print "  }\n" ;
    }
    elsif( $codeindef1{$func_name} ) {
      print "  if( inline_optimization > 1 ) {  \\\n" ;
      print "    OUT0( \"    /* Macro for $func_name */ \\n\" ) ; \\\n" ;
      for( $i = 0 ; $i < $n ; $i++ ) {
        $line = $lbuf[$i] ;
        print "    OUT0( \"$line\\n\" ) ;\\\n" ;
      }
      print "  } \\\n" ;
      print "  else { \\\n" ;
      print "    OUT0( \"$func_name$carg ;\\n\" ) ; \\\n" ;
      print "  }\n" ;
    }
    else {
      print "    OUT0( \"$func_name$carg ;\\n\" ) ; \n" ;
    }
    $func_name = "" ;
  }
}
