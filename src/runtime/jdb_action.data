#
#  Jeda Debugger Expression Parser Action code
#   
#  Author: Atsushi Kasuya
#
#  
#  Copyright (C) 2001 Juniper Networks Inc.
#
#  This program is free software; you can redistribute it and/or modify it
#  under the terms of the GNU General Public License as published by the
#  Free Software Foundation; either version 2, or (at your option) any
#  later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.  
#   

#########################################
#   commonly used actions
#########################################
<<semicolon>>
{
  /* semicolon */
  JDB_yyerrok ;
  /*
  ex_error_flag |= error_flag ;
  error_flag = 0 ;
  */
  $$ = $1 ;
}

<<DDeq0>>
{
  /* DDeq0 */
  $$ = 0 ;
}

<<DDeq1>>
{
  /* DDeq1 */
  $$ = 1 ;
}

<<DDeqD1>>
{
  /* DDeqD1 */
  $$ = $1 ; 
}

<<DDeqD1_errok>>
{
  /* DDeqD1_errok */
  $$ = $1 ;
  JDB_yyerrok ; 
  error_flag = 0 ;
}

<<DDeqD2>>
{
  /* DDeqD2 */
  $$ = $2 ; 
}

<<DDeqD3>>
{
  /* DDeqD3 */
  $$ = $3 ; 
}

<<DDeqNULL>>
{
  /* DDeqNULL */
  $$ = NULL ;
}

<<Expression_D1_NEXTeqD2>>
{
  /* Expression_D1_NEXTeqD2 */
  SKIP_ON_ERROR ;
  {
    JD_dbg_expression_node *d1, *d2 ;
    d1 = $1 ;
    d2 = $2 ;
    
    if(d1) {
      while(d1->next) d1 = d1->next ;
      d1->next = d2 ;
    }
  }
  $$ = $1 ;
}

<<Expression_D1_NEXTeqD3>>
{
  /* Expression_D1_NEXTeqD3 */
  SKIP_ON_ERROR ;
  {
    JD_dbg_expression_node *d1, *d3 ;
    d1 = $1 ;
    d3 = $3 ;
    
    if(d1) {
      while(d1->next) d1 = d1->next ;
      d1->next = d3 ;
    }
  }
  $$ = $1 ;
}


#########################################
#   actions
#########################################
<<top_assign_expression>>
{
  /* top_assign_expression */
  $$ = NULL ;
}

<<top_expression>>
{
  /* top_expression */
  SKIP_ON_ERROR ;
  if( JD_debugger_assign_command ) {
    GBG_ERROR_ILLEGAL_EXPRESSION_FOR_ASSIGN_COMMAND ;
  }
  else {
    JD_dbg_print_expression( $1, 0 ) ; /* (exp, indent) */
  }
  $$ = NULL ;
}

<<assign_expression>>
{
  /* assign_expression */
  SKIP_ON_ERROR ;
  if( JD_debugger_assign_command ) {
    if( $1->type != JD_D_dt ) {
      GBG_ERROR_ILLEGAL_LEFT_EXPRESSION_FOR_ASSIGN_COMMAND ;
    }
    else {
      JD_dbg_assign_expression( $1, $3 ) ;
    }
  }
  else {
    GBG_ERROR_ILLEGAL_ASSIGN_EXPRESSION_FOR_PRINT_COMMAND ;
  }
  $$ = NULL ;
}

<<error>>
{
  /* error */
  JD_debugger_clear_word() ;
  $$ = NULL ;
}

<<null_expression>>
{
  /* null_expression */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  $$->type = JD_D_null ;
  $$->dt = NULL ;
}

<<exp_minus_exp>>
{
  /* exp_minus_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_minus_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_plus_exp>>
{
  /* exp_plus_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_plus_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_times_exp>>
{
  /* exp_times_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_times_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_div_exp>>
{
  /* exp_div_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_div_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_mod_exp>>
{
  /* exp_mod_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_mod_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_and_exp>>
{
  /* exp_and_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_and_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_or_exp>>
{
  /* exp_or_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_or_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_eor_exp>>
{
  /* exp_eor_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_eor_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_nand_exp>>
{
  /* exp_nand_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_nand_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_nor_exp>>
{
  /* exp_nor_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_nor_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_neor_exp>>
{
  /* exp_neor_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_neor_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_land_exp>>
{
  /* exp_land_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_land_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_lor_exp>>
{
  /* exp_lor_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_lor_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_rshift_exp>>
{
  /* exp_rshift_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_rshift_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_urshift_exp>>
{
  /* exp_urshift_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_urshift_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_lshift_exp>>
{
  /* exp_lshift_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_lshift_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_lt_exp>>
{
  /* exp_lt_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_lt_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_gt_exp>>
{
  /* exp_gt_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_gt_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_eqeq_exp>>
{
  /* exp_eqeq_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_eqeq_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_le_exp>>
{
  /* exp_le_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_le_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_ge_exp>>
{
  /* exp_ge_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_ge_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_ne_exp>>
{
  /* exp_ne_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_ne_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_eqeqeq_exp>>
{
  /* exp_eqeqeq_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_eqeqeq_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_neqeq_exp>>
{
  /* exp_neqeq_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_neqeq_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_eqQeq_exp>>
{
  /* exp_eqQeq_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_eqQeq_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_Qne_exp>>
{
  /* exp_Qne_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_Qne_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_eqeqQ_exp>>
{
  /* exp_eqeqQ_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_eqeqQ_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<exp_Qeqeq_exp>>
{
  /* exp_Qeqeq_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_bin_ops( JD_dbg_b_Qeqeq_op, $1, $3, $$ ) ;
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
}

<<u_minus_exp>>
{
  /* u_minus_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_minus( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<u_tilde_exp>>
{
  /* u_tilde_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_tilde( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}


<<u_not_exp>>
{
  /* u_not_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_not( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<u_and_exp>>
{
  /* u_and_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_and( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<u_or_exp>>
{
  /* u_or_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_or( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<u_eor_exp>>
{
  /* u_eor_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_eor( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<u_nand_exp>>
{
  /* u_nand_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_nand( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<u_nor_exp>>
{
  /* u_nor_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_nor( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<u_neor_exp>>
{
  /* u_neor_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_u_neor( $2, $$ ) ;
  JD_dbg_free_exp($2) ;
}

<<eqCeq_exp>>
{
  /* u_eqCeq_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  JD_dbg_eval_exp($5) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_eqCeq_exp( $1, $3, $5, $$ ) ; 
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
  JD_dbg_free_exp($5) ;
}

<<conditional_exp>>
{
  /* conditional_exp */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($1) ;
  JD_dbg_eval_exp($3) ;
  JD_dbg_eval_exp($5) ;
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_eval_cond_exp( $1, $3, $5, $$ ) ; 
  JD_dbg_free_exp($1) ;
  JD_dbg_free_exp($3) ;
  JD_dbg_free_exp($5) ;
}

<<var_dot_var>>
{
  /* var_dot_var */
  SKIP_ON_ERROR ;
  /* working here */
  JD_dbg_eval_exp($1) ;
  $$ = (void *)JD_debugger_get_member( $1, $3 ) ;
  SKIP_ON_ERROR ;
  $$->depth = $4 ;
  if( $5 ) {
    JD_debugger_resolve_array_access( $$, $5 ) ;
  }
}

<<var_dot_super>>
{
  /* var_dot_super */
  SKIP_ON_ERROR ;
  $$ =  (void *)JD_dbg_get_super_of( $1 ) ;
  
}

<<var_expression>>
{
  /* var_expression */
  JD_dbg_expression_node *exp ;
  SKIP_ON_ERROR ;
  
  exp = (void *)JD_debugger_get_data( $1 ) ;
  if( exp && $3 ) {
    if( exp->type == JD_D_dt ) {
      exp =  (void *)JD_debugger_resolve_array_access( exp, $3 ) ;
    }
    else {
      DBG_ERROR_ILLEGAL_NAME_TYPE_FOR_ARRAY_ACCESS ;
    }
  }
  $$ = exp ;
  SKIP_ON_ERROR ;
  if( exp ) {
    if( $2 ) {
      if( exp->dt == NULL || exp->dt->type != JD_D_signal ||
          exp->dt->sub_type != JD_SD_single
      ) {
        DBG_ERROR_ILLEGAL_DEPTH_USAGE_ON_NON_SIGNAL_EXP ;
        break ;
      }
      exp->depth = $2 ;
      if( $2->int_value > 0 ) {
        JD_pli_object *obj ;
        obj = (JD_pli_object *)exp->dt->data.signal.port ;
        if( obj == NULL ) {
          DBG_ERROR_EMPTY_SIGNAL_ACCESS ;
          break ;
        }
        if( obj->is.port.depth < $2->int_value ) {
          DBG_ERROR_SIGNAL_DEPTH_TOO_DEEP ;
          break ;
        }
      }
    }
  }
  else {
    DBG_ERROR_NAME_NOT_FOUND( $1 ) ;
  }
}

<<super>>
{
  /* super */
  SKIP_ON_ERROR ;
  $$ =  (void *)JD_dbg_get_super_exp() ;
}

<<this>>
{
  /* this */
  SKIP_ON_ERROR ;
  $$ =  (void *)JD_dbg_get_this_exp() ;
}

<<dot_depth>>
{
  /* dot_depth */
  SKIP_ON_ERROR ;
  $$ =  (void *)JD_dbg_alloc_exp() ;
  $$->type = JD_D_int ;
  $$->int_value = atoi(&$1[1]) ;
  free($1) ;
}

<<array_access_range_bit_access_range>>
{
  /* array_access_range_bit_access_range */
  SKIP_ON_ERROR ;
  /* array_access_range_bit_access_range */
  $$ = $1 ;
  if( $$ ) $$->next_level = $2 ;
}

<<bit_access_range>>
{
  /* bit_access_range */
  SKIP_ON_ERROR ;
  /* bit_access_range */
  JD_dbg_eval_exp_to_int($2) ;
  JD_dbg_eval_exp_to_int($4) ;
  SKIP_ON_ERROR ;
  $$ = $2 ;
  if( $$ ) { 
    $$->next = $4 ;
    $$->etype = JD_dbg_exp_bit_range ;
  }
}

<<array_access_range>>
{
  /* array_access_range */
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($2) ;
  SKIP_ON_ERROR ;
  $$ = $2 ;
  if( $$ ) {
    if( $$->type == JD_D_string )
      $$->etype = JD_dbg_exp_string_array_range ;
    else {
      JD_dbg_eval_exp_to_int($$) ;
      SKIP_ON_ERROR ;
      $$->etype = JD_dbg_exp_array_range ;
    }
  }
}

<<real_num>>
{
  /* real_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  $$->type = JD_D_double ;
  $$->real_value = atof($1) ;
}

<<decimal_num>>
{
  /* decimal_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  $$->type = JD_D_int ;
  $$->int_value = atoi($1) ;
}

<<v_decimal_num>>
{
  /* v_decimal_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_v_decimal( $1, $$ ) ;
}

<<c_decimal_num>>
{
  /* c_decimal_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_c_decimal( $1, $$ ) ;
}

<<v_hex_num>>
{
  /* v_hex_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_v_hex( $1, $$ ) ;
}

<<c_hex_num>>
{
  /* c_hex_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_c_hex( $1, $$ ) ;
}

<<v_octal_num>>
{
  /* v_octal_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_v_octal( $1, $$ ) ;
}

<<c_octal_num>>
{
  /* c_octal_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_c_octal( $1, $$ ) ;
}

<<v_bin_num>>
{
  /* v_bin_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_v_binary( $1, $$ ) ;
}

<<c_bin_num>>
{
  /* c_bin_num */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  JD_scan_c_binary( $1, $$ ) ;
}

<<string_expression>>
{
  /* string_expression */
  SKIP_ON_ERROR ;
  $$ = (void *)JD_dbg_alloc_exp() ;
  $$->type = JD_D_string ;
  $$->string = $1 ;
}

<<duplicate_string>>
{
  /* duplicate_string */
  int len = 0 ;
  int i, n ;
  
  SKIP_ON_ERROR ;
  JD_dbg_eval_exp($4) ;
  if( $4->type != JD_D_string ) {
    DBG_ERROR_ILLEGAL_DATA_TYPE_FOR_STRING_DUPLICATION ;
    JD_dbg_free_exp($4) ;
    break ;
  }
  if( $4 && $4->string ) {
    len = strlen($4->string) ;
    if( $2->type == JD_D_int ) {
      n = $2->int_value ;
      len *= n ;
    }
    else n = 0 ; 
  }
  $$ = (void *)JD_dbg_alloc_exp() ;
  $$->type = JD_D_string ;
  $$->string = calloc(len+1,sizeof(char)) ;
  for( i = 0 ; i < n ; i++ ) {
    strcat($$->string, $4->string) ;
  }
  JD_dbg_free_exp($4) ;
}


<<concat_expression>>
{
  /* concat_expression */
  char *str ;
  int len ;
  JD_dbg_expression_node *d ;
  
  SKIP_ON_ERROR ;
  d = $2 ;
  JD_dbg_eval_exp(d) ;
  if( d->type == JD_D_string ) {
    len = 0 ;
    while( d ) {
      if( d->string )
        len += strlen(d->string) ;
      d = d->next ;
      if( d ) {
        JD_dbg_eval_exp(d) ;
        if( d->type != JD_D_string ) {
          DBG_ERROR_ILLEGAL_DATA_TYPE_FOR_STRING_CONCATENATION ;
          JD_dbg_free_exp($2) ;
          break ;
        }
      }
    }
    SKIP_ON_ERROR ;
    $$ = (void *)JD_dbg_alloc_exp() ;
    $$->type = JD_D_string ;
    $$->string = calloc(len+1,sizeof(char)) ;
    d = $2 ;
    while( d ) {
      if( d->string )
        strcat($$->string, d->string) ;
      d = d->next ;
    }
  }
  else {
    len = 0 ;
    while( d ) {
      if( d->type == JD_D_bit )
        len += d->size ;
      else if( d->type == JD_D_int ) 
        len += 32 ;
      else {
        DBG_ERROR_ILLEGAL_DATA_TYPE_FOR_CONCATENATION ;
        JD_dbg_free_exp($2) ;
        break ;
      }  
      d = d->next ;
      if( d ) JD_dbg_eval_exp(d) ;
    }
    SKIP_ON_ERROR ;
    $$ = (void *)JD_dbg_alloc_exp() ;
    $$->type = JD_D_bit ;
    $$->size = len ;
    $$->bit_a = calloc(NWORD(len),sizeof(int)) ;
    $$->bit_b = calloc(NWORD(len),sizeof(int)) ;
    d = $2 ;
    while( d ) {
      if( d->type == JD_D_bit ) {
        JD_dbg_concat_bit( 
          $$->bit_a, $$->bit_b, $$->size, 
          d->bit_a, d->bit_b, d->size
        ) ;
      }
      else if( d->type == JD_D_int ) {
        len = 0 ;
        JD_dbg_concat_bit( 
          $$->bit_a, $$->bit_b, $$->size, 
          &d->int_value, &len, 32
        ) ;
      }
      d = d->next ;
    }
  }
  JD_dbg_free_exp($2) ;
}
