/********************************************/
/* macro generated by gen_code_out_macro_prod.pl */
/********************************************/
#  define CALL_EXEC_BIT_LT_BIT  JD_exec_b_lt_b()
#define OUT_EXEC_BIT_LT_BIT \
    OUT0( "JD_exec_b_lt_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_GT_BIT  JD_exec_b_gt_b()
#define OUT_EXEC_BIT_GT_BIT \
    OUT0( "JD_exec_b_gt_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQEQ_BIT  JD_exec_b_eqeq_b()
#define OUT_EXEC_BIT_EQEQ_BIT \
    OUT0( "JD_exec_b_eqeq_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_LE_BIT  JD_exec_b_le_b()
#define OUT_EXEC_BIT_LE_BIT \
    OUT0( "JD_exec_b_le_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_GE_BIT  JD_exec_b_ge_b()
#define OUT_EXEC_BIT_GE_BIT \
    OUT0( "JD_exec_b_ge_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_NE_BIT  JD_exec_b_ne_b()
#define OUT_EXEC_BIT_NE_BIT \
    OUT0( "JD_exec_b_ne_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQEQEQ_BIT  JD_exec_b_eqeqeq_b()
#define OUT_EXEC_BIT_EQEQEQ_BIT \
    OUT0( "JD_exec_b_eqeqeq_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_NEQEQ_BIT  JD_exec_b_neqeq_b()
#define OUT_EXEC_BIT_NEQEQ_BIT \
    OUT0( "JD_exec_b_neqeq_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQQEQ_BIT  JD_exec_b_eqQeq_b()
#define OUT_EXEC_BIT_EQQEQ_BIT \
    OUT0( "JD_exec_b_eqQeq_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQEQQ_BIT  JD_exec_b_eqeqQ_b()
#define OUT_EXEC_BIT_EQEQQ_BIT \
    OUT0( "JD_exec_b_eqeqQ_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_QEQEQ_BIT  JD_exec_b_Qeqeq_b()
#define OUT_EXEC_BIT_QEQEQ_BIT \
    OUT0( "JD_exec_b_Qeqeq_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_QNE_BIT  JD_exec_b_Qne_b()
#define OUT_EXEC_BIT_QNE_BIT \
    OUT0( "JD_exec_b_Qne_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_MINUS_BIT  JD_exec_b_minus_b()
#define OUT_EXEC_BIT_MINUS_BIT \
    OUT0( "JD_exec_b_minus_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_PLUS_BIT  JD_exec_b_plus_b()
#define OUT_EXEC_BIT_PLUS_BIT \
    OUT0( "JD_exec_b_plus_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_TIMES_BIT  JD_exec_b_times_b()
#define OUT_EXEC_BIT_TIMES_BIT \
    OUT0( "JD_exec_b_times_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_DIV_BIT  JD_exec_b_div_b()
#define OUT_EXEC_BIT_DIV_BIT \
    OUT0( "JD_exec_b_div_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_MOD_BIT  JD_exec_b_mod_b()
#define OUT_EXEC_BIT_MOD_BIT \
    OUT0( "JD_exec_b_mod_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_AND_BIT  JD_exec_b_and_b()
#define OUT_EXEC_BIT_AND_BIT \
    OUT0( "JD_exec_b_and_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_OR_BIT  JD_exec_b_or_b()
#define OUT_EXEC_BIT_OR_BIT \
    OUT0( "JD_exec_b_or_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_EOR_BIT  JD_exec_b_eor_b()
#define OUT_EXEC_BIT_EOR_BIT \
    OUT0( "JD_exec_b_eor_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_NAND_BIT  JD_exec_b_nand_b()
#define OUT_EXEC_BIT_NAND_BIT \
    OUT0( "JD_exec_b_nand_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_NOR_BIT  JD_exec_b_NOR_b()
#define OUT_EXEC_BIT_NOR_BIT \
    OUT0( "JD_exec_b_NOR_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_NEOR_BIT  JD_exec_b_neor_b()
#define OUT_EXEC_BIT_NEOR_BIT \
    OUT0( "JD_exec_b_neor_b() ;\n" ) ; 
#  define CALL_EXEC_U_MINUS_BIT  JD_exec_u_minus_b()
#define OUT_EXEC_U_MINUS_BIT \
    OUT0( "JD_exec_u_minus_b() ;\n" ) ; 
#  define CALL_EXEC_U_TILDE_BIT  JD_exec_u_tilde_b()
#define OUT_EXEC_U_TILDE_BIT \
    OUT0( "JD_exec_u_tilde_b() ;\n" ) ; 
#  define CALL_EXEC_U_NOT_BIT  JD_exec_u_not_b()
#define OUT_EXEC_U_NOT_BIT \
    OUT0( "JD_exec_u_not_b() ;\n" ) ; 
#  define CALL_EXEC_U_AND_BIT  JD_exec_u_and_b()
#define OUT_EXEC_U_AND_BIT \
    OUT0( "JD_exec_u_and_b() ;\n" ) ; 
#  define CALL_EXEC_U_OR_BIT  JD_exec_u_or_b()
#define OUT_EXEC_U_OR_BIT \
    OUT0( "JD_exec_u_or_b() ;\n" ) ; 
#  define CALL_EXEC_U_EOR_BIT  JD_exec_u_eor_b()
#define OUT_EXEC_U_EOR_BIT \
    OUT0( "JD_exec_u_eor_b() ;\n" ) ; 
#  define CALL_EXEC_U_NAND_BIT  JD_exec_u_nand_b()
#define OUT_EXEC_U_NAND_BIT \
    OUT0( "JD_exec_u_nand_b() ;\n" ) ; 
#  define CALL_EXEC_U_NOR_BIT  JD_exec_u_nor_b()
#define OUT_EXEC_U_NOR_BIT \
    OUT0( "JD_exec_u_nor_b() ;\n" ) ; 
#  define CALL_EXEC_U_NEOR_BIT  JD_exec_u_neor_b()
#define OUT_EXEC_U_NEOR_BIT \
    OUT0( "JD_exec_u_neor_b() ;\n" ) ; 
#  define CALL_EXEC_INT_LT_BIT  JD_exec_i_lt_b()
#define OUT_EXEC_INT_LT_BIT \
    OUT0( "JD_exec_i_lt_b() ;\n" ) ; 
#  define CALL_EXEC_INT_GT_BIT  JD_exec_i_gt_b()
#define OUT_EXEC_INT_GT_BIT \
    OUT0( "JD_exec_i_gt_b() ;\n" ) ; 
#  define CALL_EXEC_INT_EQEQ_BIT  JD_exec_i_eqeq_b()
#define OUT_EXEC_INT_EQEQ_BIT \
    OUT0( "JD_exec_i_eqeq_b() ;\n" ) ; 
#  define CALL_EXEC_INT_LE_BIT  JD_exec_i_le_b()
#define OUT_EXEC_INT_LE_BIT \
    OUT0( "JD_exec_i_le_b() ;\n" ) ; 
#  define CALL_EXEC_INT_GE_BIT  JD_exec_i_ge_b()
#define OUT_EXEC_INT_GE_BIT \
    OUT0( "JD_exec_i_ge_b() ;\n" ) ; 
#  define CALL_EXEC_INT_NE_BIT  JD_exec_i_ne_b()
#define OUT_EXEC_INT_NE_BIT \
    OUT0( "JD_exec_i_ne_b() ;\n" ) ; 
#  define CALL_EXEC_INT_EQEQEQ_BIT  JD_exec_i_eqeqeq_b()
#define OUT_EXEC_INT_EQEQEQ_BIT \
    OUT0( "JD_exec_i_eqeqeq_b() ;\n" ) ; 
#  define CALL_EXEC_INT_NEQEQ_BIT  JD_exec_i_neqeq_b()
#define OUT_EXEC_INT_NEQEQ_BIT \
    OUT0( "JD_exec_i_neqeq_b() ;\n" ) ; 
#  define CALL_EXEC_INT_EQQEQ_BIT  JD_exec_i_eqQeq_b()
#define OUT_EXEC_INT_EQQEQ_BIT \
    OUT0( "JD_exec_i_eqQeq_b() ;\n" ) ; 
#  define CALL_EXEC_INT_EQEQQ_BIT  JD_exec_i_eqeqQ_b()
#define OUT_EXEC_INT_EQEQQ_BIT \
    OUT0( "JD_exec_i_eqeqQ_b() ;\n" ) ; 
#  define CALL_EXEC_INT_QEQEQ_BIT  JD_exec_i_Qeqeq_b()
#define OUT_EXEC_INT_QEQEQ_BIT \
    OUT0( "JD_exec_i_Qeqeq_b() ;\n" ) ; 
#  define CALL_EXEC_INT_QNE_BIT  JD_exec_i_Qne_b()
#define OUT_EXEC_INT_QNE_BIT \
    OUT0( "JD_exec_i_Qne_b() ;\n" ) ; 
#  define CALL_EXEC_INT_MINUS_BIT  JD_exec_i_minus_b()
#define OUT_EXEC_INT_MINUS_BIT \
    OUT0( "JD_exec_i_minus_b() ;\n" ) ; 
#  define CALL_EXEC_INT_PLUS_BIT  JD_exec_i_plus_b()
#define OUT_EXEC_INT_PLUS_BIT \
    OUT0( "JD_exec_i_plus_b() ;\n" ) ; 
#  define CALL_EXEC_INT_TIMES_BIT  JD_exec_i_times_b()
#define OUT_EXEC_INT_TIMES_BIT \
    OUT0( "JD_exec_i_times_b() ;\n" ) ; 
#  define CALL_EXEC_INT_DIV_BIT  JD_exec_i_div_b()
#define OUT_EXEC_INT_DIV_BIT \
    OUT0( "JD_exec_i_div_b() ;\n" ) ; 
#  define CALL_EXEC_INT_MOD_BIT  JD_exec_i_mod_b()
#define OUT_EXEC_INT_MOD_BIT \
    OUT0( "JD_exec_i_mod_b() ;\n" ) ; 
#  define CALL_EXEC_INT_AND_BIT  JD_exec_i_and_b()
#define OUT_EXEC_INT_AND_BIT \
    OUT0( "JD_exec_i_and_b() ;\n" ) ; 
#  define CALL_EXEC_INT_OR_BIT  JD_exec_i_or_b()
#define OUT_EXEC_INT_OR_BIT \
    OUT0( "JD_exec_i_or_b() ;\n" ) ; 
#  define CALL_EXEC_INT_EOR_BIT  JD_exec_i_eor_b()
#define OUT_EXEC_INT_EOR_BIT \
    OUT0( "JD_exec_i_eor_b() ;\n" ) ; 
#  define CALL_EXEC_INT_NAND_BIT  JD_exec_i_nand_b()
#define OUT_EXEC_INT_NAND_BIT \
    OUT0( "JD_exec_i_nand_b() ;\n" ) ; 
#  define CALL_EXEC_INT_NOR_BIT  JD_exec_i_NOR_b()
#define OUT_EXEC_INT_NOR_BIT \
    OUT0( "JD_exec_i_NOR_b() ;\n" ) ; 
#  define CALL_EXEC_INT_NEOR_BIT  JD_exec_i_neor_b()
#define OUT_EXEC_INT_NEOR_BIT \
    OUT0( "JD_exec_i_neor_b() ;\n" ) ; 
#  define CALL_EXEC_BIT_LT_INT  JD_exec_b_lt_i()
#define OUT_EXEC_BIT_LT_INT \
    OUT0( "JD_exec_b_lt_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_GT_INT  JD_exec_b_gt_i()
#define OUT_EXEC_BIT_GT_INT \
    OUT0( "JD_exec_b_gt_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQEQ_INT  JD_exec_b_eqeq_i()
#define OUT_EXEC_BIT_EQEQ_INT \
    OUT0( "JD_exec_b_eqeq_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_LE_INT  JD_exec_b_le_i()
#define OUT_EXEC_BIT_LE_INT \
    OUT0( "JD_exec_b_le_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_GE_INT  JD_exec_b_ge_i()
#define OUT_EXEC_BIT_GE_INT \
    OUT0( "JD_exec_b_ge_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_NE_INT  JD_exec_b_ne_i()
#define OUT_EXEC_BIT_NE_INT \
    OUT0( "JD_exec_b_ne_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQEQEQ_INT  JD_exec_b_eqeqeq_i()
#define OUT_EXEC_BIT_EQEQEQ_INT \
    OUT0( "JD_exec_b_eqeqeq_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_NEQEQ_INT  JD_exec_b_neqeq_i()
#define OUT_EXEC_BIT_NEQEQ_INT \
    OUT0( "JD_exec_b_neqeq_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQQEQ_INT  JD_exec_b_eqQeq_i()
#define OUT_EXEC_BIT_EQQEQ_INT \
    OUT0( "JD_exec_b_eqQeq_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_EQEQQ_INT  JD_exec_b_eqeqQ_i()
#define OUT_EXEC_BIT_EQEQQ_INT \
    OUT0( "JD_exec_b_eqeqQ_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_QEQEQ_INT  JD_exec_b_Qeqeq_i()
#define OUT_EXEC_BIT_QEQEQ_INT \
    OUT0( "JD_exec_b_Qeqeq_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_QNE_INT  JD_exec_b_Qne_i()
#define OUT_EXEC_BIT_QNE_INT \
    OUT0( "JD_exec_b_Qne_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_MINUS_INT  JD_exec_b_minus_i()
#define OUT_EXEC_BIT_MINUS_INT \
    OUT0( "JD_exec_b_minus_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_PLUS_INT  JD_exec_b_plus_i()
#define OUT_EXEC_BIT_PLUS_INT \
    OUT0( "JD_exec_b_plus_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_TIMES_INT  JD_exec_b_times_i()
#define OUT_EXEC_BIT_TIMES_INT \
    OUT0( "JD_exec_b_times_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_DIV_INT  JD_exec_b_div_i()
#define OUT_EXEC_BIT_DIV_INT \
    OUT0( "JD_exec_b_div_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_MOD_INT  JD_exec_b_mod_i()
#define OUT_EXEC_BIT_MOD_INT \
    OUT0( "JD_exec_b_mod_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_AND_INT  JD_exec_b_and_i()
#define OUT_EXEC_BIT_AND_INT \
    OUT0( "JD_exec_b_and_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_OR_INT  JD_exec_b_or_i()
#define OUT_EXEC_BIT_OR_INT \
    OUT0( "JD_exec_b_or_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_EOR_INT  JD_exec_b_eor_i()
#define OUT_EXEC_BIT_EOR_INT \
    OUT0( "JD_exec_b_eor_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_NAND_INT  JD_exec_b_nand_i()
#define OUT_EXEC_BIT_NAND_INT \
    OUT0( "JD_exec_b_nand_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_NOR_INT  JD_exec_b_NOR_i()
#define OUT_EXEC_BIT_NOR_INT \
    OUT0( "JD_exec_b_NOR_i() ;\n" ) ; 
#  define CALL_EXEC_BIT_NEOR_INT  JD_exec_b_neor_i()
#define OUT_EXEC_BIT_NEOR_INT \
    OUT0( "JD_exec_b_neor_i() ;\n" ) ; 
