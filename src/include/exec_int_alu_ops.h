/********************************************/
/* macro generated by gen_code_out_macro_prod.pl */
/********************************************/
#  define CALL_EXEC_INT_LT_INT  JD_exec_i_lt_i()
#define OUT_EXEC_INT_LT_INT \
    OUT0( "JD_exec_i_lt_i() ;\n" ) ; 
#  define CALL_EXEC_INT_GT_INT  JD_exec_i_gt_i()
#define OUT_EXEC_INT_GT_INT \
    OUT0( "JD_exec_i_gt_i() ;\n" ) ; 
#  define CALL_EXEC_INT_EQEQ_INT  JD_exec_i_eqeq_i()
#define OUT_EXEC_INT_EQEQ_INT \
    OUT0( "JD_exec_i_eqeq_i() ;\n" ) ; 
#  define CALL_EXEC_INT_LE_INT  JD_exec_i_le_i()
#define OUT_EXEC_INT_LE_INT \
    OUT0( "JD_exec_i_le_i() ;\n" ) ; 
#  define CALL_EXEC_INT_GE_INT  JD_exec_i_ge_i()
#define OUT_EXEC_INT_GE_INT \
    OUT0( "JD_exec_i_ge_i() ;\n" ) ; 
#  define CALL_EXEC_INT_NE_INT  JD_exec_i_ne_i()
#define OUT_EXEC_INT_NE_INT \
    OUT0( "JD_exec_i_ne_i() ;\n" ) ; 
#  define CALL_EXEC_INT_EQEQEQ_INT  JD_exec_i_eqeqeq_i()
#define OUT_EXEC_INT_EQEQEQ_INT \
    OUT0( "JD_exec_i_eqeqeq_i() ;\n" ) ; 
#  define CALL_EXEC_INT_NEQEQ_INT  JD_exec_i_neqeq_i()
#define OUT_EXEC_INT_NEQEQ_INT \
    OUT0( "JD_exec_i_neqeq_i() ;\n" ) ; 
#  define CALL_EXEC_INT_EQQEQ_INT  JD_exec_i_eqQeq_i()
#define OUT_EXEC_INT_EQQEQ_INT \
    OUT0( "JD_exec_i_eqQeq_i() ;\n" ) ; 
#  define CALL_EXEC_INT_EQEQQ_INT  JD_exec_i_eqeqQ_i()
#define OUT_EXEC_INT_EQEQQ_INT \
    OUT0( "JD_exec_i_eqeqQ_i() ;\n" ) ; 
#  define CALL_EXEC_INT_QEQEQ_INT  JD_exec_i_Qeqeq_i()
#define OUT_EXEC_INT_QEQEQ_INT \
    OUT0( "JD_exec_i_Qeqeq_i() ;\n" ) ; 
#  define CALL_EXEC_INT_QNE_INT  JD_exec_i_Qne_i()
#define OUT_EXEC_INT_QNE_INT \
    OUT0( "JD_exec_i_Qne_i() ;\n" ) ; 
#  define CALL_EXEC_INT_MINUS_INT  JD_exec_i_minus_i()
#define OUT_EXEC_INT_MINUS_INT \
    OUT0( "JD_exec_i_minus_i() ;\n" ) ; 
#  define CALL_EXEC_INT_PLUS_INT  JD_exec_i_plus_i()
#define OUT_EXEC_INT_PLUS_INT \
    OUT0( "JD_exec_i_plus_i() ;\n" ) ; 
#  define CALL_EXEC_INT_TIMES_INT  JD_exec_i_times_i()
#define OUT_EXEC_INT_TIMES_INT \
    OUT0( "JD_exec_i_times_i() ;\n" ) ; 
#  define CALL_EXEC_INT_DIV_INT  JD_exec_i_div_i()
#define OUT_EXEC_INT_DIV_INT \
    OUT0( "JD_exec_i_div_i() ;\n" ) ; 
#  define CALL_EXEC_INT_MOD_INT  JD_exec_i_mod_i()
#define OUT_EXEC_INT_MOD_INT \
    OUT0( "JD_exec_i_mod_i() ;\n" ) ; 
#  define CALL_EXEC_INT_AND_INT  JD_exec_i_and_i()
#define OUT_EXEC_INT_AND_INT \
    OUT0( "JD_exec_i_and_i() ;\n" ) ; 
#  define CALL_EXEC_INT_OR_INT  JD_exec_i_or_i()
#define OUT_EXEC_INT_OR_INT \
    OUT0( "JD_exec_i_or_i() ;\n" ) ; 
#  define CALL_EXEC_INT_EOR_INT  JD_exec_i_eor_i()
#define OUT_EXEC_INT_EOR_INT \
    OUT0( "JD_exec_i_eor_i() ;\n" ) ; 
#  define CALL_EXEC_INT_NAND_INT  JD_exec_i_nand_i()
#define OUT_EXEC_INT_NAND_INT \
    OUT0( "JD_exec_i_nand_i() ;\n" ) ; 
#  define CALL_EXEC_INT_NOR_INT  JD_exec_i_NOR_i()
#define OUT_EXEC_INT_NOR_INT \
    OUT0( "JD_exec_i_NOR_i() ;\n" ) ; 
#  define CALL_EXEC_INT_NEOR_INT  JD_exec_i_neor_i()
#define OUT_EXEC_INT_NEOR_INT \
    OUT0( "JD_exec_i_neor_i() ;\n" ) ; 
#  define CALL_EXEC_U_MINUS_INT  JD_exec_u_minus_i()
#define OUT_EXEC_U_MINUS_INT \
    OUT0( "JD_exec_u_minus_i() ;\n" ) ; 
#  define CALL_EXEC_U_TILDE_INT  JD_exec_u_tilde_i()
#define OUT_EXEC_U_TILDE_INT \
    OUT0( "JD_exec_u_tilde_i() ;\n" ) ; 
#  define CALL_EXEC_U_NOT_INT  JD_exec_u_not_i()
#define OUT_EXEC_U_NOT_INT \
    OUT0( "JD_exec_u_not_i() ;\n" ) ; 
#  define CALL_EXEC_U_AND_INT  JD_exec_u_and_i()
#define OUT_EXEC_U_AND_INT \
    OUT0( "JD_exec_u_and_i() ;\n" ) ; 
#  define CALL_EXEC_U_OR_INT  JD_exec_u_or_i()
#define OUT_EXEC_U_OR_INT \
    OUT0( "JD_exec_u_or_i() ;\n" ) ; 
#  define CALL_EXEC_U_EOR_INT  JD_exec_u_eor_i()
#define OUT_EXEC_U_EOR_INT \
    OUT0( "JD_exec_u_eor_i() ;\n" ) ; 
#  define CALL_EXEC_U_NAND_INT  JD_exec_u_nand_i()
#define OUT_EXEC_U_NAND_INT \
    OUT0( "JD_exec_u_nand_i() ;\n" ) ; 
#  define CALL_EXEC_U_NOR_INT  JD_exec_u_nor_i()
#define OUT_EXEC_U_NOR_INT \
    OUT0( "JD_exec_u_nor_i() ;\n" ) ; 
#  define CALL_EXEC_U_NEOR_INT  JD_exec_u_neor_i()
#define OUT_EXEC_U_NEOR_INT \
    OUT0( "JD_exec_u_neor_i() ;\n" ) ; 
